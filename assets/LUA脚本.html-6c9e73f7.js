import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as e}from"./app-269c9d91.js";const p={},t=e(`<h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1. 前言</h2><p>Redis是高性能的KV内存数据库，除了做缓存中间件的基本作用外还有很多用途。Redis提供了丰富的命令来供我们使用以实现一些计算。Redis的单个命令都是原子性的，有时候我们希望能够组合多个Redis命令，并让这个组合也能够原子性的执行，甚至可以重复使用，在软件热更新中也有一席之地。Redis开发者意识到这种场景还是很普遍的，就在2.6版本中引入了一个特性来解决这个问题，这就是Redis执行Lua脚本。</p><h2 id="_2-lua" tabindex="-1"><a class="header-anchor" href="#_2-lua" aria-hidden="true">#</a> 2. Lua</h2><p>Lua也算一门古老的语言了，玩魔兽世界的玩家应该对它不陌生，WOW的插件就是用Lua脚本编写的。在高并发的网络游戏中Lua大放异彩被广泛使用。</p><p>Lua广泛作为其它语言的嵌入脚本，尤其是C/C++，语法简单，小巧，源码一共才200多K，这可能也是Redis官方选择它的原因。</p><blockquote><p>另一款明星软件Nginx也支持Lua，利用Lua也可以实现很多有用的功能。</p></blockquote><h2 id="_3-lua并不难" tabindex="-1"><a class="header-anchor" href="#_3-lua并不难" aria-hidden="true">#</a> 3. Lua并不难</h2><blockquote><p>Redis 官方指南也指出不要在Lua脚本中编写过于复杂的逻辑。</p></blockquote><p>为了实现一个功能就要学习一门语言，这看起来就让人有打退堂鼓的感觉。其实Lua并不难学，而且作为本文的场景来说我们不需要去学习Lua的完全特性，<strong>要在Redis中轻量级使用Lua语言</strong>。这对掌握了Java这种重量级语言的你来说根本不算难事。这里胖哥只对Redis中的涉及到的基本语法说一说。</p><h3 id="lua-的简单语法" tabindex="-1"><a class="header-anchor" href="#lua-的简单语法" aria-hidden="true">#</a> Lua 的简单语法</h3><p>Lua在Redis脚本中我个人建议只需要使用下面这几种类型：</p><ol><li><code>nil</code> 空</li><li><code>boolean</code> 布尔值</li><li><code>number</code> 数字</li><li><code>string</code> 字符串</li><li><code>table</code> 表</li></ol><h4 id="声明类型" tabindex="-1"><a class="header-anchor" href="#声明类型" aria-hidden="true">#</a> 声明类型</h4><p>声明类型非常简单，不用携带类型。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">--- 全局变量 </span>
name <span class="token operator">=</span> <span class="token string">&#39;felord.cn&#39;</span>
<span class="token comment">--- 局部变量</span>
<span class="token keyword">local</span> age <span class="token operator">=</span> <span class="token number">18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Redis脚本在实践中不要使用全局变量，局部变量效率更高。</p></blockquote><h4 id="table-类型" tabindex="-1"><a class="header-anchor" href="#table-类型" aria-hidden="true">#</a> table 类型</h4><p>前面四种非常好理解，第五种<code>table</code>需要简单说一下，它既是数组又类似Java中的<code>HashMap</code>（字典），它是Lua中仅有的数据结构。</p><p>数组不分具体类型，演示如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Lua <span class="token number">5.1</span>.5  Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">1994</span>-2012 Lua.org, PUC-Rio
<span class="token operator">&gt;</span> arr_table <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;felord.cn&#39;</span>,<span class="token string">&#39;Felordcn&#39;</span>,1<span class="token punctuation">}</span>
<span class="token operator">&gt;</span> print<span class="token punctuation">(</span>arr_table<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
felord.cn
<span class="token operator">&gt;</span> print<span class="token punctuation">(</span>arr_table<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token operator">&gt;</span> print<span class="token punctuation">(</span><span class="token comment">#arr_table)</span>
<span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为字典：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Lua <span class="token number">5.1</span>.5  Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">1994</span>-2012 Lua.org, PUC-Rio
<span class="token operator">&gt;</span> arr_table <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token operator">=</span> <span class="token string">&#39;felord.cn&#39;</span>, age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">}</span>
<span class="token operator">&gt;</span> print<span class="token punctuation">(</span>arr_table<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
felord.cn
<span class="token operator">&gt;</span> print<span class="token punctuation">(</span>arr_table.name<span class="token punctuation">)</span>
felord.cn
<span class="token operator">&gt;</span> print<span class="token punctuation">(</span>arr_table<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
nil
<span class="token operator">&gt;</span> print<span class="token punctuation">(</span>arr_table<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">18</span>
<span class="token operator">&gt;</span> print<span class="token punctuation">(</span><span class="token comment">#arr_table)</span>
<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>混合模式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Lua <span class="token number">5.1</span>.5  Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">1994</span>-2012 Lua.org, PUC-Rio
<span class="token operator">&gt;</span> arr_table <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;felord.cn&#39;</span>,<span class="token string">&#39;Felordcn&#39;</span>,1,age <span class="token operator">=</span> <span class="token number">18</span>,nil<span class="token punctuation">}</span>
<span class="token operator">&gt;</span> print<span class="token punctuation">(</span>arr_table<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
felord.cn
<span class="token operator">&gt;</span> print<span class="token punctuation">(</span>arr_table<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
nil
<span class="token operator">&gt;</span> print<span class="token punctuation">(</span>arr_table<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">18</span>
<span class="token operator">&gt;</span> print<span class="token punctuation">(</span><span class="token comment">#arr_table)</span>
<span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>❗ <code>#</code> 取table的长度不一定精准，慎用。同时在Redis脚本中避免使用混合模式的table，同时元素应该避免包含空值<code>nil</code>。在不确定元素的情况下应该使用循环来计算真实的长度。</p></blockquote><h4 id="判断" tabindex="-1"><a class="header-anchor" href="#判断" aria-hidden="true">#</a> 判断</h4><p>判断非常简单，格式为：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">if</span> a <span class="token operator">&lt;</span> <span class="token number">10</span>  <span class="token keyword">then</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;a小于10&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">elseif</span> a <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token keyword">then</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;a小于20，大于等于10&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;a大于等于20&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数组循环" tabindex="-1"><a class="header-anchor" href="#数组循环" aria-hidden="true">#</a> 数组循环</h4><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">&#39;felord.cn&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;i = &#39;</span><span class="token operator">..</span>i<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;v = &#39;</span><span class="token operator">..</span> v<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;-------------------&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;p i = &#39;</span><span class="token operator">..</span>i<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;p v = &#39;</span><span class="token operator">..</span> v<span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果：</p><div class="language-abnf line-numbers-mode" data-ext="abnf"><pre class="language-abnf"><code><span class="token definition keyword">i</span> <span class="token operator">=</span> <span class="token repetition operator">1</span>
<span class="token definition keyword">v</span> <span class="token operator">=</span> <span class="token repetition operator">1</span>
<span class="token definition keyword">i</span> <span class="token operator">=</span> <span class="token repetition operator">2</span>
<span class="token definition keyword">v</span> <span class="token operator">=</span> <span class="token repetition operator">2</span>
-----------------------
<span class="token rule">p</span> <span class="token rule">i</span> <span class="token operator">=</span> <span class="token repetition operator">1</span>
<span class="token rule">p</span> <span class="token rule">v</span> <span class="token operator">=</span> <span class="token repetition operator">1</span>
<span class="token rule">p</span> <span class="token rule">i</span> <span class="token operator">=</span> <span class="token repetition operator">2</span>
<span class="token rule">p</span> <span class="token rule">v</span> <span class="token operator">=</span> <span class="token repetition operator">2</span>
<span class="token rule">p</span> <span class="token rule">i</span> <span class="token operator">=</span> <span class="token rule">name</span>
<span class="token rule">p</span> <span class="token rule">v</span> <span class="token operator">=</span> <span class="token rule">felord</span>.<span class="token rule">cn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值</h4><p>像Python一样，Lua也可以返回多个返回值。不过在Redis的Lua脚本中不建议使用此特性，如果有此需求请封装为数组结构。在Spring Data Redis中支持脚本的返回值规则可以从这里分析：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ReturnType</span> <span class="token function">fromJavaType</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> javaType<span class="token punctuation">)</span> <span class="token punctuation">{</span>

   <span class="token keyword">if</span> <span class="token punctuation">(</span>javaType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">ReturnType</span><span class="token punctuation">.</span><span class="token constant">STATUS</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>javaType<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">ReturnType</span><span class="token punctuation">.</span><span class="token constant">MULTI</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>javaType<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">ReturnType</span><span class="token punctuation">.</span><span class="token constant">BOOLEAN</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>javaType<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">ReturnType</span><span class="token punctuation">.</span><span class="token constant">INTEGER</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> <span class="token class-name">ReturnType</span><span class="token punctuation">.</span><span class="token constant">VALUE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此为止Redis Lua脚本所需要知识点就完了，其它的函数、协程等特性也不应该在Redis Lua脚本中出现，用到内置函数的话搜索查询一下就行了。</p><blockquote><p>在接触一门新的技术时先要中规中矩的使用，如果你想玩花活就意味着更高的学习成本。</p></blockquote><h2 id="_4-redis中的lua" tabindex="-1"><a class="header-anchor" href="#_4-redis中的lua" aria-hidden="true">#</a> 4. Redis中的Lua</h2><p>接下来就是Redis Lua脚本的实际操作了。</p><h3 id="eval命令" tabindex="-1"><a class="header-anchor" href="#eval命令" aria-hidden="true">#</a> EVAL命令</h3><p>Redis中使用<code>EVAL</code>命令来直接执行指定的Lua脚本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>EVAL luascript numkeys key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span> arg <span class="token punctuation">[</span>arg <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>EVAL</code> 命令的关键字。</li><li><code>luascript</code> Lua 脚本。</li><li><code>numkeys</code> 指定的Lua脚本需要处理键的数量，其实就是 <code>key</code>数组的长度。</li><li><code>key</code> 传递给Lua脚本零到多个键，空格隔开，在Lua 脚本中通过 <code>KEYS[INDEX]</code>来获取对应的值，其中<code>1 &lt;= INDEX &lt;= numkeys</code>。</li><li><code>arg</code>是传递给脚本的零到多个附加参数，空格隔开，在Lua脚本中通过<code>ARGV[INDEX]</code>来获取对应的值，其中<code>1 &lt;= INDEX &lt;= numkeys</code>。</li></ul><p>接下来我简单来演示获取键<code>hello</code>的值得简单脚本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> hello world
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get hello
<span class="token string">&quot;world&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> EVAL <span class="token string">&quot;return redis.call(&#39;GET&#39;,KEYS[1])&quot;</span> <span class="token number">1</span> hello
<span class="token string">&quot;world&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> EVAL <span class="token string">&quot;return redis.call(&#39;GET&#39;,&#39;hello&#39;)&quot;</span>
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR wrong number of arguments <span class="token keyword">for</span> <span class="token string">&#39;eval&#39;</span> <span class="token builtin class-name">command</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> EVAL <span class="token string">&quot;return redis.call(&#39;GET&#39;,&#39;hello&#39;)&quot;</span> <span class="token number">0</span>
<span class="token string">&quot;world&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的演示代码中发现，<code>KEYS[1]</code>可以直接替换为<code>hello</code>,<strong>但是Redis官方文档指出这种是不建议的，目的是在命令执行前会对命令进行分析，以确保Redis Cluster可以将命令转发到适当的集群节点</strong>。</p><blockquote><p><code>numkeys</code>无论什么情况下都是必须的命令参数。</p></blockquote><h3 id="call函数和pcall函数" tabindex="-1"><a class="header-anchor" href="#call函数和pcall函数" aria-hidden="true">#</a> call函数和pcall函数</h3><p>在上面的例子中我们通过<code>redis.call()</code>来执行了一个<code>SET</code>命令，其实我们也可以替换为<code>redis.pcall()</code>。它们唯一的区别就在于处理错误的方式，前者执行命令错误时会向调用者直接返回一个错误；而后者则会将错误包装为一个我们上面讲的<code>table</code>表格：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> EVAL <span class="token string">&quot;return redis.call(&#39;no_command&#39;)&quot;</span> <span class="token number">0</span>
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR Error running script <span class="token punctuation">(</span>call to f_1e6efd00ab50dd564a9f13e5775e27b966c2141e<span class="token punctuation">)</span>: @user_script:1: @user_script: <span class="token number">1</span>: Unknown Redis <span class="token builtin class-name">command</span> called from Lua script
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> EVAL <span class="token string">&quot;return redis.pcall(&#39;no_command&#39;)&quot;</span> <span class="token number">0</span>
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> @user_script: <span class="token number">1</span>: Unknown Redis <span class="token builtin class-name">command</span> called from Lua script
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就像Java遇到一个异常，前者会直接抛出一个异常；后者会把异常处理成JSON返回。</p><h3 id="值转换" tabindex="-1"><a class="header-anchor" href="#值转换" aria-hidden="true">#</a> 值转换</h3><p>由于在Redis中存在Redis和Lua两种不同的运行环境，在Redis和Lua互相传递数据时必然发生对应的转换操作，这种转换操作是我们在实践中不能忽略的。例如如果Lua脚本向Redis返回小数，那么会损失小数精度；如果转换为字符串则是安全的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> EVAL <span class="token string">&quot;return 3.14&quot;</span> <span class="token number">0</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> EVAL <span class="token string">&quot;return tostring(3.14)&quot;</span> <span class="token number">0</span>
<span class="token string">&quot;3.14&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>传递字符串、整数是安全的，<strong>其它需要你去仔细查看官方文档并进行实际验证</strong>。</p></blockquote><h3 id="原子执行" tabindex="-1"><a class="header-anchor" href="#原子执行" aria-hidden="true">#</a> 原子执行</h3><p>Lua脚本在Redis中是以原子方式执行的，在Redis服务器执行<code>EVAL</code>命令时，<strong>在命令执行完毕并向调用者返回结果之前，只会执行当前命令指定的Lua脚本包含的所有逻辑，其它客户端发送的命令将被阻塞</strong>，直到<code>EVAL</code>命令执行完毕为止。因此LUA脚本不宜编写一些过于复杂了逻辑，必须尽量保证Lua脚本的效率，否则会影响其它客户端。</p><h3 id="脚本管理" tabindex="-1"><a class="header-anchor" href="#脚本管理" aria-hidden="true">#</a> 脚本管理</h3><h4 id="script-load" tabindex="-1"><a class="header-anchor" href="#script-load" aria-hidden="true">#</a> SCRIPT LOAD</h4><p>加载脚本到缓存以达到重复使用，避免多次加载浪费带宽，每一个脚本都会通过SHA校验返回唯一字符串标识。需要配合<code>EVALSHA</code>命令来执行缓存后的脚本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SCRIPT LOAD <span class="token string">&quot;return &#39;hello&#39;&quot;</span>
<span class="token string">&quot;1b936e3fe509bcbc9cd0664897bbe8fd0cac101b&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> EVALSHA 1b936e3fe509bcbc9cd0664897bbe8fd0cac101b <span class="token number">0</span>
<span class="token string">&quot;hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="script-flush" tabindex="-1"><a class="header-anchor" href="#script-flush" aria-hidden="true">#</a> SCRIPT FLUSH</h4><p>既然有缓存就有清除缓存，但是遗憾的是并没有根据SHA来删除脚本缓存，而是清除所有的脚本缓存，所以在生产中一般不会再生产过程中使用该命令。</p><h4 id="script-exists" tabindex="-1"><a class="header-anchor" href="#script-exists" aria-hidden="true">#</a> SCRIPT EXISTS</h4><p>以SHA标识为参数检查一个或者多个缓存是否存在。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SCRIPT EXISTS 1b936e3fe509bcbc9cd0664897bbe8fd0cac101b  1b936e3fe509bcbc9cd0664897bbe8fd0cac1012
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="script-kill" tabindex="-1"><a class="header-anchor" href="#script-kill" aria-hidden="true">#</a> SCRIPT KILL</h4><p>终止正在执行的脚本。<strong>但是为了数据的完整性此命令并不能保证一定能终止成功</strong>。如果当一个脚本执行了一部分写的逻辑而需要被终止时，该命令是不凑效的。需要执行<code>SHUTDOWN nosave</code>在不对数据执行持久化的情况下终止服务器来完成终止脚本。</p><h3 id="其它一些要点" tabindex="-1"><a class="header-anchor" href="#其它一些要点" aria-hidden="true">#</a> 其它一些要点</h3><p>了解了上面这些知识基本上可以满足开发一些简单的Lua脚本了。但是实际开发中还是有一些要点的。</p><ul><li>务必对Lua脚本进行全面测试以保证其逻辑的健壮性，当Lua脚本遇到异常时，已经执行过的逻辑是不会回滚的。</li><li>尽量不使用Lua提供的具有随机性的函数，参见相关官方文档。</li><li>在Lua脚本中不要编写<code>function</code>函数,整个脚本作为一个函数的函数体。</li><li>在脚本编写中声明的变量全部使用<code>local</code>关键字。</li><li>在集群中使用Lua脚本要确保逻辑中所有的<code>key</code>分到相同机器，也就是同一个插槽(slot)中，可采用<strong>Redis Hash Tag</strong>技术。</li><li>再次重申Lua脚本一定不要包含过于耗时、过于复杂的逻辑。</li></ul>`,71),o=[t];function l(c,i){return s(),a("div",null,o)}const d=n(p,[["render",l],["__file","LUA脚本.html.vue"]]);export{d as default};
