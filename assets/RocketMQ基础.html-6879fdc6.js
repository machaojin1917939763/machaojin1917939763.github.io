import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,b as n}from"./app-06c789d7.js";const r={},o=n(`<h2 id="现在请介绍一下racketmq" tabindex="-1"><a class="header-anchor" href="#现在请介绍一下racketmq" aria-hidden="true">#</a> 现在请介绍一下RacketMQ</h2><p>RocketMQ 是由阿里巴巴开发的一个开源的分布式消息传递和队列模型中间件。它旨在为大规模消息和交易处理提供低延迟、高可用、高吞吐量的解决方案。</p><p>以下是 RocketMQ 的主要特点和组件：</p><ol><li><strong>高性能和可伸缩性</strong>：RocketMQ 可以处理大量的消息，提供毫秒级的延迟和高吞吐量。</li><li><strong>容错和高可用性</strong>：RocketMQ 支持分布式部署，允许在<strong>节点失败的情况下继续提供服务</strong>。</li><li><strong>顺序消息</strong>：RocketMQ 支持严格的消息顺序，并能确保消息按照其发送的顺序进行消费。</li><li><strong>事务消息</strong>：RocketMQ 支持发布/订阅事务消息，从而确保消息的可靠传输。</li><li><strong>消息延迟和定时</strong>：RocketMQ 支持发送延迟消息和定时消息。</li><li><strong>消息过滤</strong>：RocketMQ 支持基于多种属性的消息过滤。</li></ol><p>主要组件：</p><ol><li><strong>Name Server</strong>：作为元数据的轻量级角色，它维护了生产者和消费者的路由信息。RocketMQ 客户端通过查询 Name Server 来找到对应的 Broker。</li><li><strong>Broker</strong>：真正存储消息的组件，处理消息的发送和消费。它可以水平扩展。</li><li><strong>Producer</strong>：消息生产者，它发送消息到 RocketMQ 的 Broker。</li><li><strong>Consumer</strong>：消息消费者，它从 Broker 拉取消息并处理。</li></ol><p>RocketMQ 在大规模分布式系统、实时数据处理和日志收集等多种场景中都已经得到广泛应用。</p><h2 id="什么是nameserver" tabindex="-1"><a class="header-anchor" href="#什么是nameserver" aria-hidden="true">#</a> 什么是nameServer？</h2><p>NameServer 在 RocketMQ 中扮演了非常关键的角色。它是 RocketMQ 的元数据服务提供者，但与其他的消息中间件的元数据组件不同，RocketMQ 的 NameServer 不存储消息，只提供轻量级的元数据服务。</p><p>以下是 NameServer 的主要功能和特点：</p><ol><li><p><strong>路由注册</strong>：Broker 启动后，会向所有的 NameServer 注册其路由信息。同样，Producer 和 Consumer 在启动时也会从 NameServer 获取 Broker 的路由信息。</p></li><li><p><strong>无状态和相互独立</strong>：每个 NameServer 是相互独立的，不会相互通信。它们存储相同的路由信息，但不会进行信息同步。这意味着，如果某个 NameServer 失败，其他的 NameServer 仍然可以继续提供服务。</p></li><li><p><strong>负载均衡</strong>：虽然 NameServer 不直接涉及消息路由，但它为 Producer 和 Consumer 提供了关于 Broker 的信息，使得客户端能够实现负载均衡。</p></li><li><p><strong>快速故障转移</strong>：当某个 Broker 失效或者宕机，Producer 和 Consumer 可以迅速地从 NameServer 获取其他可用的 Broker 的信息。</p></li><li><p><strong>简单和高效</strong>：由于 NameServer 只处理轻量级的元数据，它的设计和实现都相对简单，可以确保高效的运行和快速的响应。</p></li></ol><p>NameServer 在 RocketMQ 的体系结构中起到了关键的路由服务角色，确保了 Producer 和 Consumer 可以找到合适的 Broker 进行消息的发送和接收。</p><h2 id="什么是broker" tabindex="-1"><a class="header-anchor" href="#什么是broker" aria-hidden="true">#</a> 什么是broker？</h2><p>在 RocketMQ 中，Broker 扮演的是核心角色，是真正进行消息存储、读写的组件。以下是关于 Broker 的详细描述：</p><ol><li><strong>消息存储与读写</strong>：Broker 负责消息的存储、管理和分发。当生产者（Producer）发送消息时，这些消息被存储在 Broker 上。当消费者（Consumer）需要读取消息时，它从 Broker 获取。</li><li><strong>高可用性</strong>：为了提供高可用性和故障转移能力，Broker 可以配置成集群模式。在这种模式下，一个主 Broker（Master）和一个或多个从 Broker（Slave）运行。主 Broker 用于读写，而从 Broker 主要用于备份和故障转移。</li><li><strong>消息过滤</strong>：Broker 支持基于标签的消息过滤，这允许消费者只订阅其感兴趣的消息。</li><li><strong>顺序消息和事务消息</strong>：Broker 能够支持严格的消息顺序以及处理事务消息。</li><li><strong>消息积压和清理</strong>：Broker 会对旧的消息进行清理，确保存储不被填满。同时，它还提供了延迟消息和定时消息的功能。</li><li><strong>与 NameServer 交互</strong>：Broker 定期向 NameServer 注册或更新其路由信息。这确保了生产者和消费者能够知道哪个 Broker 是活动的或者可用的。</li><li><strong>负载均衡</strong>：Broker 支持多种负载均衡策略，确保消息的分发均匀且高效。</li></ol><p>总的来说，Broker 是 RocketMQ 的核心组件，承担了消息的存储和分发工作。通过与其他组件（如 NameServer、Producer 和 Consumer）的协同工作，它确保了消息的高效、可靠和有序的传输。</p><h2 id="我能在docker中同时启动多个broker吗-这样能不能实现高可用-如果实现高可用-需要怎么操作" tabindex="-1"><a class="header-anchor" href="#我能在docker中同时启动多个broker吗-这样能不能实现高可用-如果实现高可用-需要怎么操作" aria-hidden="true">#</a> 我能在docker中同时启动多个broker吗？这样能不能实现高可用，如果实现高可用，需要怎么操作？</h2><p>是的，你可以在 Docker 中同时启动多个 Broker，而这正是实现 RocketMQ 高可用性（HA）的方法之一。</p><p>高可用性在 RocketMQ 中通常通过主/从（Master/Slave）复制来实现。简单来说，当你启动一个主（Master）Broker 后，你可以启动一个或多个从（Slave）Broker，这些从 Broker 将复制主 Broker 的数据。当主 Broker 失效时，从 Broker 可以接管并继续服务。</p><p>为了在 Docker 中实现 RocketMQ 的 HA，你可以采取以下步骤：</p><ol><li><p><strong>启动 NameServer</strong>：首先，确保你的 NameServer 在运行。如前面所述，NameServer 存储 Broker 的路由信息。</p></li><li><p><strong>启动 Master Broker</strong>：启动主 Broker 实例。</p></li><li><p><strong>启动 Slave Broker</strong>：启动一个或多个从 Broker 实例。这些实例需要与主 Broker 有相同的 Broker 名称，但具有不同的 <code>brokerId</code>。通常，主 Broker 的 <code>brokerId</code> 是 0，而从 Broker 的 <code>brokerId</code> 开始于 1。</p></li><li><p><strong>配置</strong>：确保你的 Broker 的配置中启用了同步复制（Synchronous replication）或异步复制（Asynchronous replication）。这是通过 <code>brokerRole</code> 配置项完成的，它可以设置为 <code>SYNC_MASTER</code>、<code>ASYNC_MASTER</code>、<code>SLAVE</code> 等。</p></li><li><p><strong>网络</strong>：确保 Docker 网络配置允许 Broker 实例之间的通信。使用 Docker 的 bridge 网络或其他网络解决方案，确保所有 Broker 容器都在同一个网络中。</p></li><li><p><strong>生产者和消费者配置</strong>：当配置生产者和消费者时，确保它们知道所有的 NameServer 地址，并设置为使用自动故障转移。</p></li></ol><p>通过上述步骤，你可以在 Docker 中实现 RocketMQ 的高可用性。但请注意，实际生产环境中的设置可能需要进一步的优化和调整，以确保最佳的性能和可靠性。</p><h2 id="那如何通过命令启动多个broker呢" tabindex="-1"><a class="header-anchor" href="#那如何通过命令启动多个broker呢" aria-hidden="true">#</a> 那如何通过命令启动多个broker呢？</h2><p>要在 Docker 中启动多个 RocketMQ Broker（例如主 Broker 和从 Broker），你需要遵循以下步骤：</p><ol><li><p><strong>启动 NameServer</strong>（如果还没启动）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9876</span>:9876 <span class="token parameter variable">--name</span> rmqnamesrv rocketmqinc/rocketmq namesrv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>启动 Master Broker</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">10909</span>:10909 <span class="token parameter variable">-p</span> <span class="token number">10911</span>:10911 <span class="token parameter variable">--name</span> rmqmaster <span class="token parameter variable">--link</span> rmqnamesrv:namesrv rocketmqinc/rocketmq <span class="token function">sh</span> mqbroker <span class="token parameter variable">-n</span> namesrv:9876 <span class="token parameter variable">-c</span> /path/to/master/broker.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在此命令中，我们使用 <code>-c</code> 指定 Master Broker 的配置文件。<code>/path/to/master/broker.properties</code> 应替换为实际配置文件的路径。</p></li><li><p><strong>启动 Slave Broker</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">11909</span>:11909 <span class="token parameter variable">-p</span> <span class="token number">11911</span>:11911 <span class="token parameter variable">--name</span> rmqslave <span class="token parameter variable">--link</span> rmqnamesrv:namesrv rocketmqinc/rocketmq <span class="token function">sh</span> mqbroker <span class="token parameter variable">-n</span> namesrv:9876 <span class="token parameter variable">-c</span> /path/to/slave/broker.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意我们为从 Broker 分配了不同的端口（例如，11909 和 11911）。此外，<code>/path/to/slave/broker.properties</code> 应替换为 Slave Broker 的配置文件路径。</p><p>在 <code>broker.properties</code> 文件中，确保以下内容正确设置：</p><ul><li><p>对于 Master Broker：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">brokerId</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>
<span class="token key attr-name">brokerName</span><span class="token punctuation">=</span><span class="token value attr-value">SomeBrokerName</span>
<span class="token key attr-name">brokerRole</span><span class="token punctuation">=</span><span class="token value attr-value">ASYNC_MASTER</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对于 Slave Broker：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">brokerId</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">brokerName</span><span class="token punctuation">=</span><span class="token value attr-value">SomeBrokerName</span>
<span class="token key attr-name">brokerRole</span><span class="token punctuation">=</span><span class="token value attr-value">SLAVE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>其中，<code>SomeBrokerName</code> 应该是两个 Broker 共享的同一名称。</p></li></ol><p>通过这些步骤，你应该可以在 Docker 中成功启动一个主 Broker 和一个从 Broker，实现 RocketMQ 的高可用性配置。如果你想启动更多的从 Broker，只需根据需要进行适当的端口映射和配置调整。</p><h2 id="那如何通过命令启动多个broker呢-1" tabindex="-1"><a class="header-anchor" href="#那如何通过命令启动多个broker呢-1" aria-hidden="true">#</a> 那如何通过命令启动多个broker呢？</h2><p>要在 Docker 中启动多个 RocketMQ Broker（例如主 Broker 和从 Broker），你需要遵循以下步骤：</p><ol><li><p><strong>启动 NameServer</strong>（如果还没启动）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9876</span>:9876 <span class="token parameter variable">--name</span> rmqnamesrv rocketmqinc/rocketmq namesrv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>启动 Master Broker</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">10909</span>:10909 <span class="token parameter variable">-p</span> <span class="token number">10911</span>:10911 <span class="token parameter variable">--name</span> rmqmaster <span class="token parameter variable">--link</span> rmqnamesrv:namesrv rocketmqinc/rocketmq <span class="token function">sh</span> mqbroker <span class="token parameter variable">-n</span> namesrv:9876 <span class="token parameter variable">-c</span> /path/to/master/broker.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在此命令中，我们使用 <code>-c</code> 指定 Master Broker 的配置文件。<code>/path/to/master/broker.properties</code> 应替换为实际配置文件的路径。</p></li><li><p><strong>启动 Slave Broker</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">11909</span>:11909 <span class="token parameter variable">-p</span> <span class="token number">11911</span>:11911 <span class="token parameter variable">--name</span> rmqslave <span class="token parameter variable">--link</span> rmqnamesrv:namesrv rocketmqinc/rocketmq <span class="token function">sh</span> mqbroker <span class="token parameter variable">-n</span> namesrv:9876 <span class="token parameter variable">-c</span> /path/to/slave/broker.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意我们为从 Broker 分配了不同的端口（例如，11909 和 11911）。此外，<code>/path/to/slave/broker.properties</code> 应替换为 Slave Broker 的配置文件路径。</p><p>在 <code>broker.properties</code> 文件中，确保以下内容正确设置：</p><ul><li><p>对于 Master Broker：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">brokerId</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>
<span class="token key attr-name">brokerName</span><span class="token punctuation">=</span><span class="token value attr-value">SomeBrokerName</span>
<span class="token key attr-name">brokerRole</span><span class="token punctuation">=</span><span class="token value attr-value">ASYNC_MASTER</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对于 Slave Broker：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">brokerId</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">brokerName</span><span class="token punctuation">=</span><span class="token value attr-value">SomeBrokerName</span>
<span class="token key attr-name">brokerRole</span><span class="token punctuation">=</span><span class="token value attr-value">SLAVE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>其中，<code>SomeBrokerName</code> 应该是两个 Broker 共享的同一名称。</p></li></ol><p>通过这些步骤，你应该可以在 Docker 中成功启动一个主 Broker 和一个从 Broker，实现 RocketMQ 的高可用性配置。如果你想启动更多的从 Broker，只需根据需要进行适当的端口映射和配置调整。</p><h2 id="我现在已经有一个broker了-还需要继续运行第二步吗" tabindex="-1"><a class="header-anchor" href="#我现在已经有一个broker了-还需要继续运行第二步吗" aria-hidden="true">#</a> 我现在已经有一个broker了，还需要继续运行第二步吗？</h2><p>不，如果你已经有一个运行中的 Master Broker，那么不需要再次运行第二步。为了增加从 Broker，你只需要执行第三步来启动一个或多个 Slave Broker。</p><p>为了添加一个 Slave Broker，可以这样做：</p><ol><li><strong>启动 Slave Broker</strong>：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">11909</span>:11909 <span class="token parameter variable">-p</span> <span class="token number">11911</span>:11911 <span class="token parameter variable">--name</span> rmqslave1 <span class="token parameter variable">--link</span> rmqnamesrv:namesrv rocketmqinc/rocketmq <span class="token function">sh</span> mqbroker <span class="token parameter variable">-n</span> namesrv:9876 <span class="token parameter variable">-c</span> /path/to/slave/broker.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>确保你的 <code>broker.properties</code> 为从 Broker 配置：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">brokerId</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">brokerName</span><span class="token punctuation">=</span><span class="token value attr-value">YourBrokerName</span>
<span class="token key attr-name">brokerRole</span><span class="token punctuation">=</span><span class="token value attr-value">SLAVE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>YourBrokerName</code> 是 Master Broker 和 Slave Broker 共享的名称。</p><p>如果你想添加更多的从 Broker，只需根据需要进行适当的端口映射和配置调整，然后相应地增加 <code>brokerId</code>（例如，2、3等）。</p><h2 id="broker-properties文件在哪" tabindex="-1"><a class="header-anchor" href="#broker-properties文件在哪" aria-hidden="true">#</a> broker.properties文件在哪？</h2><p>在 RocketMQ 的默认配置中，<code>broker.properties</code> 文件并不直接存在。但是，RocketMQ 提供了示例配置文件，您可以基于这些示例创建您自己的 <code>broker.properties</code> 文件。</p><p>如果您使用的是官方的 RocketMQ Docker 镜像，这些示例配置文件可能位于容器的 <code>/opt/rocketmq-\${version}/conf/</code> 目录下（其中 <code>\${version}</code> 是您的 RocketMQ 版本）。</p><p>要查看和编辑这些配置文件，你可以如下操作：</p><ol><li><p><strong>进入 Broker 容器</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rmqbroker /bin/sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>导航到配置目录并列出所有文件</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /opt/rocketmq-<span class="token variable">\${version}</span>/conf/
<span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用 vi 或其他文本编辑器查看或编辑配置文件</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vi</span> 2m-2s-async/broker-a.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>但是，如果你打算在 Docker 中持久化配置或分享配置，你可能需要将配置文件从容器复制到宿主机上，然后在运行容器时将其挂载回容器。这样，即使容器被删除，你的配置也会保持不变。</p><p>例如，为了从容器复制配置到宿主机并再次挂载它，你可以：</p><ol><li><p><strong>从容器复制到宿主机</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> rmqbroker:/opt/rocketmq-<span class="token variable">\${version}</span>/conf/2m-2s-async/broker-a.properties /path/on/host/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>当你启动一个新的 Broker 容器时，将配置从宿主机挂载回容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">..</span>. <span class="token parameter variable">-v</span> /path/on/host/broker-a.properties:/opt/rocketmq-<span class="token variable">\${version}</span>/conf/2m-2s-async/broker-a.properties <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>记住替换上述命令中的占位符，如 <code>\${version}</code> 和 <code>/path/on/host/</code>。</p><h2 id="主从复制" tabindex="-1"><a class="header-anchor" href="#主从复制" aria-hidden="true">#</a> 主从复制</h2><p>运行一个Master和两个Slaves，我为你准备了配置和相应的Docker启动命令。</p><p><strong>1. 配置</strong>:<br> 你需要为每个Broker实例维护一个单独的配置文件。</p><p><strong>broker-a-master.properties</strong>:</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">brokerClusterName</span><span class="token punctuation">=</span><span class="token value attr-value">DefaultCluster</span>
<span class="token key attr-name">brokerName</span><span class="token punctuation">=</span><span class="token value attr-value">broker-a</span>
<span class="token key attr-name">brokerId</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>
<span class="token key attr-name">deleteWhen</span><span class="token punctuation">=</span><span class="token value attr-value">04</span>
<span class="token key attr-name">fileReservedTime</span><span class="token punctuation">=</span><span class="token value attr-value">48</span>
<span class="token key attr-name">brokerRole</span><span class="token punctuation">=</span><span class="token value attr-value">ASYNC_MASTER</span>
<span class="token key attr-name">flushDiskType</span><span class="token punctuation">=</span><span class="token value attr-value">ASYNC_FLUSH</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>broker-a-slave1.properties</strong>:</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">brokerClusterName</span><span class="token punctuation">=</span><span class="token value attr-value">DefaultCluster</span>
<span class="token key attr-name">brokerName</span><span class="token punctuation">=</span><span class="token value attr-value">broker-a</span>
<span class="token key attr-name">brokerId</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">brokerRole</span><span class="token punctuation">=</span><span class="token value attr-value">SLAVE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>broker-a-slave2.properties</strong>:</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">brokerClusterName</span><span class="token punctuation">=</span><span class="token value attr-value">DefaultCluster</span>
<span class="token key attr-name">brokerName</span><span class="token punctuation">=</span><span class="token value attr-value">broker-a</span>
<span class="token key attr-name">brokerId</span><span class="token punctuation">=</span><span class="token value attr-value">2</span>
<span class="token key attr-name">brokerRole</span><span class="token punctuation">=</span><span class="token value attr-value">SLAVE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. Docker启动命令</strong>:</p><p>启动Master:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">10909</span>:10909 <span class="token parameter variable">-p</span> <span class="token number">10911</span>:10911 <span class="token parameter variable">-v</span> D:/MyEnvironment/rocketmq/rocaketmq/conf/2m-2s-async:/opt/rocketmq-4.4.0/conf/2m-2s-async <span class="token parameter variable">--name</span> rmqmaster <span class="token parameter variable">--link</span> rmqnamesrv:namesrv rocketmqinc/rocketmq <span class="token function">sh</span> mqbroker <span class="token parameter variable">-n</span> namesrv:9876 <span class="token parameter variable">-c</span> /opt/rocketmq-4.4.0/conf/2m-2s-async/broker-a-master.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动Slave1:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">11909</span>:11909 <span class="token parameter variable">-p</span> <span class="token number">11911</span>:11911 <span class="token parameter variable">-v</span> D:/MyEnvironment/rocketmq/rocaketmq/conf/2m-2s-async:/opt/rocketmq-4.4.0/conf/2m-2s-async <span class="token parameter variable">--name</span> rmqslave1 <span class="token parameter variable">--link</span> rmqnamesrv:namesrv rocketmqinc/rocketmq <span class="token function">sh</span> mqbroker <span class="token parameter variable">-n</span> namesrv:9876 <span class="token parameter variable">-c</span> /opt/rocketmq-4.4.0/conf/2m-2s-async/broker-a-slave1.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动Slave2:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">12909</span>:12909 <span class="token parameter variable">-p</span> <span class="token number">12911</span>:12911 <span class="token parameter variable">-v</span> D:/MyEnvironment/rocketmq/rocaketmq/conf/2m-2s-async:/opt/rocketmq-4.4.0/conf/2m-2s-async <span class="token parameter variable">--name</span> rmqslave2 <span class="token parameter variable">--link</span> rmqnamesrv:namesrv rocketmqinc/rocketmq <span class="token function">sh</span> mqbroker <span class="token parameter variable">-n</span> namesrv:9876 <span class="token parameter variable">-c</span> /opt/rocketmq-4.4.0/conf/2m-2s-async/broker-a-slave2.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：确保你的配置文件路径正确，并且在启动命令中提到的这些端口在宿主机上都是可用的。如果你的RocketMQ Docker镜像版本或文件路径与示例不符，可能需要进行相应的调整。</p><p><code>D:/MyEnvironment/rocketmq/rocaketmq/conf/2m-2s-async:/opt/rocketmq-4.4.0/conf/2m-2s-async</code>与<code>/opt/rocketmq-4.4.0/conf/2m-2s-async/broker-a-slave2.properties</code>需要与实际的路径进行替换</p><p>一旦你按照上述命令启动了Brokers，你应该能在RocketMQ控制台上看到一个Master和两个Slaves。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
C:\\Users\\machaojin&gt;docker network connect rmqnetwork rmqnamesrv

C:\\Users\\machaojin&gt;docker network connect rmqnetwork rmqbmaster

C:\\Users\\machaojin&gt;docker network connect rmqnetwork rmqconsole

C:\\Users\\machaojin&gt;docker exec -it rmqconsole ping rmqnamesrv
PING rmqnamesrv (172.19.0.2): 56 data bytes
64 bytes from 172.19.0.2: icmp_seq=0 ttl=64 time=0.389 ms
64 bytes from 172.19.0.2: icmp_seq=1 ttl=64 time=0.059 ms
64 bytes from 172.19.0.2: icmp_seq=2 ttl=64 time=0.097 ms
64 bytes from 172.19.0.2: icmp_seq=3 ttl=64 time=0.128 ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker network connect rmqnetwork rmqslave1
docker network connect rmqnetwork rmqslave2
docker network connect rmqnetwork rmqmaster
docker network connect rmqnetwork rmqconsole
docker network connect rmqnetwork rmqnamesrv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -d -p 9876:9876 --name rmqnamesrv rocketmqinc/rocketmq /opt/rocketmq-4.4.0/bin/mqnamesrv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -d -p 8181:8080 -e &quot;JAVA_OPTS=-Drocketmq.namesrv.addr=rmqnamesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false&quot; --name rmqconsole styletang/rocketmq-console-ng
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-p</span> <span class="token number">9876</span>:9876  <span class="token parameter variable">--name</span> rmqnamesrv rocketmqinc/rocketmq /opt/rocketmq-4.4.0/bin/mqnamesrv

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-p</span> <span class="token number">8181</span>:8080 <span class="token parameter variable">-e</span> <span class="token string">&quot;JAVA_OPTS=-Drocketmq.namesrv.addr=rmqnamesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false&quot;</span> <span class="token parameter variable">--name</span> rmqconsole styletang/rocketmq-console-ng

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-p</span> <span class="token number">10909</span>:10909 <span class="token parameter variable">-p</span> <span class="token number">10911</span>:10911  <span class="token parameter variable">-v</span> D:/MyEnvironment/rocketmq/rocaketmq/conf/2m-2s-async:/opt/rocketmq-4.4.0/conf/2m-2s-async <span class="token parameter variable">--name</span> rmqmaster1 <span class="token parameter variable">--link</span> rmqnamesrv:namesrv rocketmqinc/rocketmq <span class="token function">sh</span> mqbroker <span class="token parameter variable">-n</span> namesrv:9876 <span class="token parameter variable">-c</span> /opt/rocketmq-4.4.0/conf/2m-2s-async/broker-a-master.properties

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-p</span> <span class="token number">13909</span>:13909 <span class="token parameter variable">-p</span> <span class="token number">13911</span>:13911  <span class="token parameter variable">-v</span> D:/MyEnvironment/rocketmq/rocaketmq/conf/2m-2s-async:/opt/rocketmq-4.4.0/conf/2m-2s-async <span class="token parameter variable">--name</span> rmqmaster2 <span class="token parameter variable">--link</span> rmqnamesrv:namesrv rocketmqinc/rocketmq <span class="token function">sh</span> mqbroker <span class="token parameter variable">-n</span> namesrv:9876 <span class="token parameter variable">-c</span> /opt/rocketmq-4.4.0/conf/2m-2s-async/broker-a-s.properties

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-p</span> <span class="token number">11909</span>:11909 <span class="token parameter variable">-p</span> <span class="token number">11911</span>:11911  <span class="token parameter variable">-v</span> D:/MyEnvironment/rocketmq/rocaketmq/conf/2m-2s-async:/opt/rocketmq-4.4.0/conf/2m-2s-async <span class="token parameter variable">--name</span>  rmqslave1 <span class="token parameter variable">--link</span> rmqnamesrv:namesrv rocketmqinc/rocketmq <span class="token function">sh</span> mqbroker <span class="token parameter variable">-n</span> namesrv:9876 <span class="token parameter variable">-c</span> /opt/rocketmq-4.4.0/conf/2m-2s-async/broker-b.properties

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-p</span> <span class="token number">12909</span>:12909 <span class="token parameter variable">-p</span> <span class="token number">12911</span>:12911  <span class="token parameter variable">-v</span> D:/MyEnvironment/rocketmq/rocaketmq/conf/2m-2s-async:/opt/rocketmq-4.4.0/conf/2m-2s-async <span class="token parameter variable">--name</span>  rmqslave2 <span class="token parameter variable">--link</span> rmqnamesrv:namesrv rocketmqinc/rocketmq <span class="token function">sh</span> mqbroker <span class="token parameter variable">-n</span> namesrv:9876 <span class="token parameter variable">-c</span> /opt/rocketmq-4.4.0/conf/2m-2s-async/broker-b-s.properties

<span class="token function">docker</span> network connect rmqnetwork rmqslave1
<span class="token function">docker</span> network connect rmqnetwork rmqslave2
<span class="token function">docker</span> network connect rmqnetwork rmqmaster1
<span class="token function">docker</span> network connect rmqnetwork rmqmaster2
<span class="token function">docker</span> network connect rmqnetwork rmqconsole
<span class="token function">docker</span> network connect rmqnetwork rmqnamesrv

<span class="token function">docker</span> stop rmqconsole rmqnamesrv rmqmaster1 rmqmaster2 rmqmaster1 rmqslave1 rmqslave2 

<span class="token function">docker</span> <span class="token function">rm</span> rmqconsole rmqnamesrv rmqmaster1 rmqmaster2 rmqmaster1 rmqslave1 rmqslave2 

<span class="token function">docker</span> restart rmqconsole rmqnamesrv rmqmaster1 rmqmaster2 rmqmaster1 rmqslave1 rmqslave2  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -d -p 9876:9876 --name apache-rmqnamesrv apache/rocketmq mqnamesrv
docker run -d -p 8181:8080 -e &quot;JAVA_OPTS=-Drocketmq.namesrv.addr=apache-rmqnamesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false&quot; --name apache-rmqconsole styletang/rocketmq-console-ng
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,73),t=[o];function p(l,c){return a(),s("div",null,t)}const k=e(r,[["render",p],["__file","RocketMQ基础.html.vue"]]);export{k as default};
