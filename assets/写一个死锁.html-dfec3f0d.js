const t=JSON.parse('{"key":"v-a8eedc3c","path":"/blog/Java%E5%B9%B6%E5%8F%91/%E5%86%99%E4%B8%80%E4%B8%AA%E6%AD%BB%E9%94%81.html","title":"手写死锁","lang":"zh-CN","frontmatter":{"title":"手写死锁","order":2,"category":["Java面经"],"tag":["JUC"],"description":"死锁是一种多线程编程中的常见问题，它发生在当两个或多个线程互相等待对方持有的锁或资源时，导致它们都无法继续执行的情况。死锁会导致程序卡住或失败，因为死锁的线程无法进行下一步。 要写一个死锁的例子，我们需要创建至少两个线程，并让它们分别获取不同的锁或资源，然后再尝试获取对方已经持有的锁或资源。这样，就会形成一个循环等待的状态，导致死锁。 以下是一个使用 ...","head":[["meta",{"property":"og:url","content":"https://machaojin.cn/machaojin1917939763.github.io/blog/Java%E5%B9%B6%E5%8F%91/%E5%86%99%E4%B8%80%E4%B8%AA%E6%AD%BB%E9%94%81.html"}],["meta",{"property":"og:site_name","content":"JavaBlog"}],["meta",{"property":"og:title","content":"手写死锁"}],["meta",{"property":"og:description","content":"死锁是一种多线程编程中的常见问题，它发生在当两个或多个线程互相等待对方持有的锁或资源时，导致它们都无法继续执行的情况。死锁会导致程序卡住或失败，因为死锁的线程无法进行下一步。 要写一个死锁的例子，我们需要创建至少两个线程，并让它们分别获取不同的锁或资源，然后再尝试获取对方已经持有的锁或资源。这样，就会形成一个循环等待的状态，导致死锁。 以下是一个使用 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-10T07:12:20.000Z"}],["meta",{"property":"article:author","content":"Mr.Chaojin"}],["meta",{"property":"article:tag","content":"JUC"}],["meta",{"property":"article:modified_time","content":"2023-08-10T07:12:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"手写死锁\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-10T07:12:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Chaojin\\",\\"url\\":\\"https://machaojin.cn\\",\\"email\\":\\"ma@machaojin.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1691651540000,"updatedTime":1691651540000,"contributors":[{"name":"machaojin","email":"1917939763@qq.com","commits":1}]},"readingTime":{"minutes":1.86,"words":558},"filePathRelative":"blog/Java并发/写一个死锁.md","localizedDate":"2023年8月10日","autoDesc":true}');export{t as data};
