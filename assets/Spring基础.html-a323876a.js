import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as e,a as s}from"./app-98e9989b.js";const t={},o=s(`<h1 id="什么是-spring-列举-spring-的核心模块" tabindex="-1"><a class="header-anchor" href="#什么是-spring-列举-spring-的核心模块" aria-hidden="true">#</a> 什么是 Spring？列举 Spring 的核心模块</h1><h2 id="spring-概述" tabindex="-1"><a class="header-anchor" href="#spring-概述" aria-hidden="true">#</a> Spring 概述</h2><p>Spring 是一个开源的企业级 Java 应用框架，由 Rod Johnson 在 2003 年首次发布。它的主要目标是使 Java EE 开发变得更加简单，并提供一种更好的方式来构建企业级应用程序。Spring 提供了一系列的编程和配置模型，支持应用程序的开发从最小的微服务到大型企业级应用。</p><h2 id="spring-的核心模块" tabindex="-1"><a class="header-anchor" href="#spring-的核心模块" aria-hidden="true">#</a> Spring 的核心模块</h2><h3 id="_1-核心容器-core-container" tabindex="-1"><a class="header-anchor" href="#_1-核心容器-core-container" aria-hidden="true">#</a> 1. 核心容器 (Core Container)</h3><ul><li><strong>Beans</strong>: 提供了配置和管理应用对象的能力。</li><li><strong>Core</strong>: 提供了 Spring 的核心功能，如 IoC 和依赖注入。</li><li><strong>Context</strong>: 通过提供各种方式来访问对象，为应用程序提供了框架式的对象访问能力。</li><li><strong>Expression Language</strong>: 提供了查询和操作对象图的能力。</li></ul><h3 id="_2-数据访问-集成-data-access-integration" tabindex="-1"><a class="header-anchor" href="#_2-数据访问-集成-data-access-integration" aria-hidden="true">#</a> 2. 数据访问/集成 (Data Access/Integration)</h3><ul><li><strong>JDBC</strong>: 提供了一个 JDBC 抽象层，可以消除冗长的 JDBC 编码。</li><li><strong>ORM</strong>: 提供了与流行的 ORM 框架的集成，如 JPA, JDO, Hibernate 等。</li><li><strong>JMS 和 Messaging</strong>: 提供了与消息系统的集成。</li><li><strong>Transactions</strong>: 支持编程和声明式的事务管理。</li></ul><h3 id="_3-web-模块" tabindex="-1"><a class="header-anchor" href="#_3-web-模块" aria-hidden="true">#</a> 3. Web 模块</h3><ul><li><strong>Web</strong>: 提供了与 web 开发的集成，如面向 web 的功能，如多文件上传功能等。</li><li><strong>Web MVC</strong>: 提供了 Spring MVC，一个用于构建 web 应用程序的模型-视图-控制器框架。</li><li><strong>Web Websocket</strong>: 提供了 WebSocket 功能。</li><li><strong>Web Webflux</strong>: 提供了反应式 web 和 web client 的支持。</li></ul><h3 id="_4-安全性-security" tabindex="-1"><a class="header-anchor" href="#_4-安全性-security" aria-hidden="true">#</a> 4. 安全性 (Security)</h3><p>提供了身份验证和授权的全面支持。</p><h3 id="_5-aop-aspect-oriented-programming" tabindex="-1"><a class="header-anchor" href="#_5-aop-aspect-oriented-programming" aria-hidden="true">#</a> 5. AOP (Aspect-Oriented Programming)</h3><p>提供了面向切面的编程能力，允许定义跨多个对象的关注点。</p><h3 id="_6-消息-messaging" tabindex="-1"><a class="header-anchor" href="#_6-消息-messaging" aria-hidden="true">#</a> 6. 消息 (Messaging)</h3><p>提供了消息生产和消费的支持。</p><h3 id="_7-测试-testing" tabindex="-1"><a class="header-anchor" href="#_7-测试-testing" aria-hidden="true">#</a> 7. 测试 (Testing)</h3><p>支持使用 JUnit 或 TestNG 对 Spring 组件进行单元测试和集成测试。</p><h1 id="什么是ico、依赖注入" tabindex="-1"><a class="header-anchor" href="#什么是ico、依赖注入" aria-hidden="true">#</a> 什么是ICO、依赖注入</h1><h2 id="ioc-控制反转" tabindex="-1"><a class="header-anchor" href="#ioc-控制反转" aria-hidden="true">#</a> IoC (控制反转)</h2><p><strong>控制反转 (IoC)</strong> 是一种设计原则，用于实现低耦合的软件架构。在传统的程序设计中，主程序控制调用其它对象的方法。但在IoC中，这种控制流程被“反转”了，由框架或容器来控制程序流程。</p><h3 id="ioc-的好处" tabindex="-1"><a class="header-anchor" href="#ioc-的好处" aria-hidden="true">#</a> IoC 的好处:</h3><ol><li><strong>低耦合</strong>: 通过IoC，对象不需要知道它们的依赖如何被实例化或查找。</li><li><strong>模块化</strong>: 可以更容易地更换或升级系统的各个部分。</li><li><strong>更好的可测试性</strong>: 由于依赖可以被替换，所以可以轻松地插入模拟对象或存根进行测试。</li></ol><hr><h2 id="依赖注入-di" tabindex="-1"><a class="header-anchor" href="#依赖注入-di" aria-hidden="true">#</a> 依赖注入 (DI)</h2><p><strong>依赖注入 (DI)</strong> 是IoC的一种实现方式。在DI中，对象不自己查找它们的依赖或使用硬编码的方式创建依赖。相反，依赖项（通常是服务或对象）是通过对象的构造函数、属性或方法传递给它的。</p><h3 id="di-的好处" tabindex="-1"><a class="header-anchor" href="#di-的好处" aria-hidden="true">#</a> DI 的好处:</h3><ol><li><strong>灵活性</strong>: 可以在运行时更改应用程序的行为，而不需要修改代码。</li><li><strong>可维护性</strong>: 通过减少类之间的耦合，使得代码更容易维护。</li><li><strong>可测试性</strong>: 可以为测试提供模拟的依赖项。</li></ol><h1 id="什么是spring-bean" tabindex="-1"><a class="header-anchor" href="#什么是spring-bean" aria-hidden="true">#</a> 什么是Spring Bean</h1><h2 id="spring-bean" tabindex="-1"><a class="header-anchor" href="#spring-bean" aria-hidden="true">#</a> Spring Bean</h2><p>在Spring框架中，<strong>Bean</strong> 是一个被Spring IoC容器实例化、组装和管理的对象。这些Bean是从由开发者提供的配置元数据中创建的，这些元数据可以是XML配置、Java注解或Java代码。</p><h3 id="spring-bean的特点" tabindex="-1"><a class="header-anchor" href="#spring-bean的特点" aria-hidden="true">#</a> Spring Bean的特点:</h3><ol><li><strong>单例或原型</strong>: 默认情况下，Spring Beans是单例的，这意味着每次请求或调用一个Bean时，都会返回相同的对象。但也可以配置为原型，这意味着每次请求都会返回一个新的实例。</li><li><strong>生命周期</strong>: Spring Beans有一个生命周期，从创建到销毁。Spring容器管理这个生命周期，并提供了钩子方法，允许在Bean的生命周期的不同阶段执行自定义逻辑。</li><li><strong>依赖注入</strong>: Spring容器负责注入Bean的依赖。这意味着开发者不需要显式地创建和管理对象的依赖关系。</li></ol><hr><h3 id="如何定义spring-bean" tabindex="-1"><a class="header-anchor" href="#如何定义spring-bean" aria-hidden="true">#</a> 如何定义Spring Bean:</h3><ol><li><strong>XML配置</strong>:</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.MyClass<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 注入属性、构造函数参数等 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>Java注解</strong>:</li></ol><p>使用<code>@Component</code>, <code>@Service</code>, <code>@Repository</code>, <code>@Controller</code>等注解来标记一个类为Spring Bean。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>Java配置</strong>:</li></ol><p>使用<code>@Configuration</code>注解的类中，可以使用<code>@Bean</code>注解来定义Bean。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MyBean</span> <span class="token function">myBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="bean的生命周期" tabindex="-1"><a class="header-anchor" href="#bean的生命周期" aria-hidden="true">#</a> Bean的生命周期:</h3><p>Spring Bean的生命周期从容器启动时开始，直到容器关闭时结束。在此期间，可以使用<code>@PostConstruct</code>和<code>@PreDestroy</code>注解来定义初始化和销毁方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 初始化代码</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PreDestroy</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 清理资源</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>💡 <strong>注意</strong>: Spring Bean是Spring框架核心IoC容器的基础，它使得依赖注入和对象生命周期管理变得简单。</p></blockquote><h1 id="创建-spring-bean-的方法有哪些" tabindex="-1"><a class="header-anchor" href="#创建-spring-bean-的方法有哪些" aria-hidden="true">#</a> 创建 Spring Bean 的方法有哪些</h1><h2 id="创建-spring-bean-的方法" tabindex="-1"><a class="header-anchor" href="#创建-spring-bean-的方法" aria-hidden="true">#</a> 创建 Spring Bean 的方法</h2><p>在Spring框架中，有多种方法可以定义和创建Bean。以下是最常用的方法：</p><hr><h3 id="_1-使用构造函数" tabindex="-1"><a class="header-anchor" href="#_1-使用构造函数" aria-hidden="true">#</a> 1. 使用构造函数</h3><p>通过在XML配置文件中定义<code>&lt;constructor-arg&gt;</code>元素，可以使用Bean的构造函数来注入依赖。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.ExampleBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>anotherBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sampleValue<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-使用-setter-方法" tabindex="-1"><a class="header-anchor" href="#_2-使用-setter-方法" aria-hidden="true">#</a> 2. 使用 Setter 方法</h3><p>可以使用Bean的setter方法来注入依赖。这是最常用的方法，因为它允许可选的依赖注入。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.ExampleBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>anotherBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>anotherBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sampleProperty<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sampleValue<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-使用注解" tabindex="-1"><a class="header-anchor" href="#_3-使用注解" aria-hidden="true">#</a> 3. 使用注解</h3><p>Spring提供了多种注解来自动创建和配置Beans。</p><ul><li><strong>@Component</strong>: 基本注解，标记一个类为Spring组件。</li><li><strong>@Repository</strong>: 用于标记数据存储类。</li><li><strong>@Service</strong>: 用于标记服务类。</li><li><strong>@Controller</strong>: 用于标记控制器类。</li></ul><p>此外，<code>@Autowired</code>注解可以用于自动注入依赖。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AnotherService</span> anotherService<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-使用-java-配置" tabindex="-1"><a class="header-anchor" href="#_4-使用-java-配置" aria-hidden="true">#</a> 4. 使用 Java 配置</h3><p>可以使用Java类而不是XML来定义Bean配置。这些类通常使用<code>@Configuration</code>注解标记，并使用<code>@Bean</code>注解来定义Beans。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ExampleBean</span> <span class="token function">exampleBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token function">anotherBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">AnotherBean</span> <span class="token function">anotherBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AnotherBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5-使用工厂方法" tabindex="-1"><a class="header-anchor" href="#_5-使用工厂方法" aria-hidden="true">#</a> 5. 使用工厂方法</h3><p>可以定义一个工厂方法来创建Bean。这个方法可以是静态的，也可以是非静态的。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 使用非静态工厂方法 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>factoryInstance<span class="token punctuation">&quot;</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createInstance<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- 使用静态工厂方法 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.ExampleBeanFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createInstance<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_6-使用bean的继承" tabindex="-1"><a class="header-anchor" href="#_6-使用bean的继承" aria-hidden="true">#</a> 6. 使用Bean的继承</h3><p>可以使用<code>parent</code>属性来继承另一个Bean的定义。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parentBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">abstract</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.ParentBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- some configurations --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>childBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parentBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- additional configurations --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>这些方法提供了在不同情境下定义和创建Spring Beans的灵活性。选择哪种方法取决于具体的需求和偏好。</p><h1 id="component-和-bean-的区别是什么" tabindex="-1"><a class="header-anchor" href="#component-和-bean-的区别是什么" aria-hidden="true">#</a> @Component 和 @Bean 的区别是什么</h1><h2 id="component-与-bean-的区别" tabindex="-1"><a class="header-anchor" href="#component-与-bean-的区别" aria-hidden="true">#</a> <code>@Component</code> 与 <code>@Bean</code> 的区别</h2><p><code>@Component</code> 和 <code>@Bean</code> 都是Spring框架中用于Bean创建和管理的注解，但它们的用途和工作方式有所不同。以下是它们之间的主要区别：</p><hr><h3 id="_1-定义方式" tabindex="-1"><a class="header-anchor" href="#_1-定义方式" aria-hidden="true">#</a> 1. <strong>定义方式</strong></h3><ul><li><p><strong>@Component</strong>:</p><ul><li><p>是一个类级别的注解。</p></li><li><p>通常与<code>@Repository</code>、<code>@Service</code>、<code>@Controller</code>等注解一起使用，这些注解本质上都是<code>@Component</code>的特化形式。</p></li><li><p>当Spring扫描到使用了<code>@Component</code>（或其派生注解）的类时，它会自动将该类注册为Bean。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleComponent</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>@Bean</strong>:</p><ul><li><p>是一个方法级别的注解。</p></li><li><p>通常在使用<code>@Configuration</code>注解的类中使用，该类定义了如何创建Bean。</p></li><li><p><code>@Bean</code>注解的方法返回的对象会被注册为Spring容器中的Bean。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ExampleBean</span> <span class="token function">exampleBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><hr><h3 id="_2-用途" tabindex="-1"><a class="header-anchor" href="#_2-用途" aria-hidden="true">#</a> 2. <strong>用途</strong></h3><ul><li><p><strong>@Component</strong>:</p><ul><li>用于自动检测和配置那些直接由Spring创建的Beans。</li><li>适用于那些可以由Spring自动扫描和管理的组件。</li></ul></li><li><p><strong>@Bean</strong>:</p><ul><li>用于明确地定义一个Bean，特别是当Bean的创建涉及到特殊的初始化逻辑或需要调用特定的方法时。</li><li>适用于第三方库中的类或需要特殊配置的Beans。</li></ul></li></ul><hr><h3 id="_3-依赖注入" tabindex="-1"><a class="header-anchor" href="#_3-依赖注入" aria-hidden="true">#</a> 3. <strong>依赖注入</strong></h3><ul><li><p><strong>@Component</strong>:</p><ul><li>Spring可以使用<code>@Autowired</code>或其他注入机制自动注入依赖。</li></ul></li><li><p><strong>@Bean</strong>:</p><ul><li>在定义Bean的方法中，可以明确地提供依赖，或者使用方法参数来注入依赖。</li></ul></li></ul><hr><h3 id="_4-作用范围" tabindex="-1"><a class="header-anchor" href="#_4-作用范围" aria-hidden="true">#</a> 4. <strong>作用范围</strong></h3><ul><li><p><strong>@Component</strong>:</p><ul><li>通常与<code>@ComponentScan</code>一起使用，该注解告诉Spring在哪里查找<code>@Component</code>注解的类。</li></ul></li><li><p><strong>@Bean</strong>:</p><ul><li>只在定义它的<code>@Configuration</code>类的上下文中有效。</li></ul></li></ul><hr><p>总之，<code>@Component</code>和<code>@Bean</code>都是创建Spring Bean的方法，但它们的应用场景和方式有所不同。<code>@Component</code>更多地用于自动扫描和组件发现，而<code>@Bean</code>则用于明确地定义和配置Bean。</p><h1 id="注入-bean-的注解有哪些-autowired-和-resource-的区别是什么" tabindex="-1"><a class="header-anchor" href="#注入-bean-的注解有哪些-autowired-和-resource-的区别是什么" aria-hidden="true">#</a> 注入 Bean 的注解有哪些？@Autowired 和 @Resource 的区别是什么？</h1><h2 id="注入-bean-的注解" tabindex="-1"><a class="header-anchor" href="#注入-bean-的注解" aria-hidden="true">#</a> 注入 Bean 的注解</h2><p>在Spring框架中，有多种注解可以用于注入Bean。以下是最常用的几种：</p><hr><h3 id="_1-autowired" tabindex="-1"><a class="header-anchor" href="#_1-autowired" aria-hidden="true">#</a> 1. <strong>@Autowired</strong></h3><p>这是Spring提供的最常用的注入注解。它可以与字段、构造函数和setter方法一起使用。默认情况下，它按类型（by type）进行自动装配。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">ExampleService</span> exampleService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-inject" tabindex="-1"><a class="header-anchor" href="#_2-inject" aria-hidden="true">#</a> 2. <strong>@Inject</strong></h3><p>这个注解与<code>@Autowired</code>非常相似，但它是基于Java的JSR-330规范。与<code>@Autowired</code>一样，它默认按类型进行注入。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Inject</span>
<span class="token keyword">private</span> <span class="token class-name">ExampleService</span> exampleService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-resource" tabindex="-1"><a class="header-anchor" href="#_3-resource" aria-hidden="true">#</a> 3. <strong>@Resource</strong></h3><p>这个注解是基于Java的JSR-250规范。它默认按名称（by name）进行注入。如果没有指定名称，它会退回到按类型（by type）进行注入。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;specificExampleService&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">ExampleService</span> exampleService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-value" tabindex="-1"><a class="header-anchor" href="#_4-value" aria-hidden="true">#</a> 4. <strong>@Value</strong></h3><p>用于注入基本类型的值，如字符串、整数等。它可以与属性文件和SpEL表达式一起使用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${property.name}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> propertyName<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="autowired-与-resource-的区别" tabindex="-1"><a class="header-anchor" href="#autowired-与-resource-的区别" aria-hidden="true">#</a> <code>@Autowired</code> 与 <code>@Resource</code> 的区别</h2><p>虽然<code>@Autowired</code>和<code>@Resource</code>都用于依赖注入，但它们之间存在一些关键差异：</p><ol><li><p><strong>来源</strong>:</p><ul><li><code>@Autowired</code>是Spring特有的注解。</li><li><code>@Resource</code>是Java的JSR-250规范的一部分。</li></ul></li><li><p><strong>注入方式</strong>:</p><ul><li><code>@Autowired</code>默认按类型（by type）进行注入。</li><li><code>@Resource</code>默认按名称（by name）进行注入。如果没有找到匹配的名称，它会退回到按类型进行注入。</li></ul></li><li><p><strong>使用位置</strong>:</p><ul><li><code>@Autowired</code>可以与字段、构造函数和setter方法一起使用。</li><li><code>@Resource</code>通常与字段和setter方法一起使用。</li></ul></li><li><p><strong>需要的依赖</strong>:</p><ul><li><code>@Autowired</code>只需要Spring的核心容器。</li><li><code>@Resource</code>需要JSR-250的API库。</li></ul></li></ol><hr><p>在选择使用哪个注解时，通常建议坚持使用一个项目或团队的标准。如果你不需要按名称进行注入，并且想要避免额外的依赖，那么<code>@Autowired</code>可能是一个更好的选择。如果你正在使用Java EE或需要按名称进行注入，那么<code>@Resource</code>可能更合适。</p><h1 id="bean-的作用域有哪些" tabindex="-1"><a class="header-anchor" href="#bean-的作用域有哪些" aria-hidden="true">#</a> Bean 的作用域有哪些</h1><h2 id="bean-的作用域" tabindex="-1"><a class="header-anchor" href="#bean-的作用域" aria-hidden="true">#</a> Bean 的作用域</h2><p>在 Spring 框架中，Bean 的作用域定义了 Spring 容器如何创建和管理 Bean 实例。以下是 Spring 支持的主要 Bean 作用域：</p><hr><h3 id="_1-singleton-单例" tabindex="-1"><a class="header-anchor" href="#_1-singleton-单例" aria-hidden="true">#</a> 1. <strong>Singleton (单例)</strong></h3><ul><li><strong>描述</strong>: 容器中只有一个 Bean 实例。这是默认的作用域。</li><li><strong>XML配置</strong>: <code>&lt;bean id=&quot;...&quot; class=&quot;...&quot; scope=&quot;singleton&quot;/&gt;</code></li><li><strong>Java配置</strong>: 默认情况下，使用 <code>@Bean</code> 注解定义的 Bean 就是单例的。</li></ul><hr><h3 id="_2-prototype-原型" tabindex="-1"><a class="header-anchor" href="#_2-prototype-原型" aria-hidden="true">#</a> 2. <strong>Prototype (原型)</strong></h3><ul><li><strong>描述</strong>: 每次请求都会创建一个新的 Bean 实例。</li><li><strong>XML配置</strong>: <code>&lt;bean id=&quot;...&quot; class=&quot;...&quot; scope=&quot;prototype&quot;/&gt;</code></li><li><strong>Java配置</strong>: 使用 <code>@Scope(&quot;prototype&quot;)</code> 注解。</li></ul><hr><h3 id="_3-request" tabindex="-1"><a class="header-anchor" href="#_3-request" aria-hidden="true">#</a> 3. <strong>Request</strong></h3><ul><li><strong>描述</strong>: 每次 HTTP 请求都会创建一个新的 Bean 实例。主要用于 Web 应用程序。</li><li><strong>XML配置</strong>: <code>&lt;bean id=&quot;...&quot; class=&quot;...&quot; scope=&quot;request&quot;/&gt;</code></li><li><strong>Java配置</strong>: 使用 <code>@Scope(&quot;request&quot;)</code> 注解。</li></ul><hr><h3 id="_4-session" tabindex="-1"><a class="header-anchor" href="#_4-session" aria-hidden="true">#</a> 4. <strong>Session</strong></h3><ul><li><strong>描述</strong>: 在一个 HTTP Session 中，一个 Bean 表示一个实例。主要用于 Web 应用程序。</li><li><strong>XML配置</strong>: <code>&lt;bean id=&quot;...&quot; class=&quot;...&quot; scope=&quot;session&quot;/&gt;</code></li><li><strong>Java配置</strong>: 使用 <code>@Scope(&quot;session&quot;)</code> 注解。</li></ul><hr><h3 id="_5-application" tabindex="-1"><a class="header-anchor" href="#_5-application" aria-hidden="true">#</a> 5. <strong>Application</strong></h3><ul><li><strong>描述</strong>: 在一个 ServletContext 生命周期中，Bean 是单例的。主要用于 Web 应用程序。</li><li><strong>XML配置</strong>: <code>&lt;bean id=&quot;...&quot; class=&quot;...&quot; scope=&quot;application&quot;/&gt;</code></li><li><strong>Java配置</strong>: 使用 <code>@Scope(&quot;application&quot;)</code> 注解。</li></ul><hr><h3 id="_6-websocket" tabindex="-1"><a class="header-anchor" href="#_6-websocket" aria-hidden="true">#</a> 6. <strong>Websocket</strong></h3><ul><li><strong>描述</strong>: 在一个 WebSocket 生命周期中，Bean 是单例的。</li><li><strong>XML配置</strong>: <code>&lt;bean id=&quot;...&quot; class=&quot;...&quot; scope=&quot;websocket&quot;/&gt;</code></li><li><strong>Java配置</strong>: 使用 <code>@Scope(&quot;websocket&quot;)</code> 注解。</li></ul><hr><p>选择合适的 Bean 作用域取决于具体的应用需求。例如，对于无状态的服务，单例作用域是合适的，因为它可以提供更好的性能。对于需要保存用户特定状态的 Bean，如用户会话，session 作用域可能更合适。</p><h1 id="介绍下-bean-的生命周期" tabindex="-1"><a class="header-anchor" href="#介绍下-bean-的生命周期" aria-hidden="true">#</a> 介绍下 Bean 的生命周期</h1><h2 id="bean-的生命周期" tabindex="-1"><a class="header-anchor" href="#bean-的生命周期" aria-hidden="true">#</a> Bean 的生命周期</h2><p>Spring Bean 的生命周期描述了从创建到销毁 Bean 的过程。在这个过程中，Spring 提供了多个扩展点，允许在 Bean 的生命周期的不同阶段执行自定义逻辑。以下是 Bean 生命周期的主要阶段：</p><hr><h3 id="_1-实例化-bean" tabindex="-1"><a class="header-anchor" href="#_1-实例化-bean" aria-hidden="true">#</a> 1. <strong>实例化 Bean</strong></h3><p>Spring 容器首先创建 Bean 的实例。</p><hr><h3 id="_2-设置-bean-属性" tabindex="-1"><a class="header-anchor" href="#_2-设置-bean-属性" aria-hidden="true">#</a> 2. <strong>设置 Bean 属性</strong></h3><p>Spring 通过反射设置 Bean 的属性，这些属性值来自配置文件或注解。</p><hr><h3 id="_3-调用-beannameaware-的-setbeanname-方法" tabindex="-1"><a class="header-anchor" href="#_3-调用-beannameaware-的-setbeanname-方法" aria-hidden="true">#</a> 3. <strong>调用 <code>BeanNameAware</code> 的 <code>setBeanName</code> 方法</strong></h3><p>如果 Bean 实现了 <code>BeanNameAware</code> 接口，Spring 会调用 <code>setBeanName</code> 方法，传入 Bean 的 ID。</p><hr><h3 id="_4-调用-beanfactoryaware-的-setbeanfactory-方法" tabindex="-1"><a class="header-anchor" href="#_4-调用-beanfactoryaware-的-setbeanfactory-方法" aria-hidden="true">#</a> 4. <strong>调用 <code>BeanFactoryAware</code> 的 <code>setBeanFactory</code> 方法</strong></h3><p>如果 Bean 实现了 <code>BeanFactoryAware</code> 接口，Spring 会调用 <code>setBeanFactory</code> 方法，传入工厂实例。</p><hr><h3 id="_5-调用-applicationcontextaware-的-setapplicationcontext-方法" tabindex="-1"><a class="header-anchor" href="#_5-调用-applicationcontextaware-的-setapplicationcontext-方法" aria-hidden="true">#</a> 5. <strong>调用 <code>ApplicationContextAware</code> 的 <code>setApplicationContext</code> 方法</strong></h3><p>如果 Bean 实现了 <code>ApplicationContextAware</code> 接口，Spring 会调用 <code>setApplicationContext</code> 方法，传入应用上下文。</p><hr><h3 id="_6-beanpostprocessor-的-postprocessbeforeinitialization-方法" tabindex="-1"><a class="header-anchor" href="#_6-beanpostprocessor-的-postprocessbeforeinitialization-方法" aria-hidden="true">#</a> 6. <strong><code>BeanPostProcessor</code> 的 <code>postProcessBeforeInitialization</code> 方法</strong></h3><p>Spring 会调用所有 <code>BeanPostProcessor</code> 的 <code>postProcessBeforeInitialization</code> 方法，允许对 Bean 进行修改。</p><hr><h3 id="_7-调用-initializingbean-的-afterpropertiesset-方法" tabindex="-1"><a class="header-anchor" href="#_7-调用-initializingbean-的-afterpropertiesset-方法" aria-hidden="true">#</a> 7. <strong>调用 <code>InitializingBean</code> 的 <code>afterPropertiesSet</code> 方法</strong></h3><p>如果 Bean 实现了 <code>InitializingBean</code> 接口，Spring 会调用 <code>afterPropertiesSet</code> 方法。</p><hr><h3 id="_8-调用自定义的初始化方法" tabindex="-1"><a class="header-anchor" href="#_8-调用自定义的初始化方法" aria-hidden="true">#</a> 8. <strong>调用自定义的初始化方法</strong></h3><p>如果在 Bean 配置中定义了初始化方法（如 XML 中的 <code>init-method</code> 属性或 <code>@PostConstruct</code> 注解），Spring 会调用它。</p><hr><h3 id="_9-beanpostprocessor-的-postprocessafterinitialization-方法" tabindex="-1"><a class="header-anchor" href="#_9-beanpostprocessor-的-postprocessafterinitialization-方法" aria-hidden="true">#</a> 9. <strong><code>BeanPostProcessor</code> 的 <code>postProcessAfterInitialization</code> 方法</strong></h3><p>Spring 会调用所有 <code>BeanPostProcessor</code> 的 <code>postProcessAfterInitialization</code> 方法，允许对 Bean 进行修改。</p><hr><h3 id="_10-bean-可以使用了" tabindex="-1"><a class="header-anchor" href="#_10-bean-可以使用了" aria-hidden="true">#</a> 10. <strong>Bean 可以使用了</strong></h3><p>此时，Bean 已经准备好并可以在应用中使用。</p><hr><h3 id="_11-销毁阶段" tabindex="-1"><a class="header-anchor" href="#_11-销毁阶段" aria-hidden="true">#</a> 11. <strong>销毁阶段</strong></h3><p>当容器关闭时，Spring 会处理 Bean 的销毁阶段。</p><ul><li>如果 Bean 实现了 <code>DisposableBean</code> 接口，Spring 会调用其 <code>destroy</code> 方法。</li><li>如果在 Bean 配置中定义了销毁方法（如 XML 中的 <code>destroy-method</code> 属性或 <code>@PreDestroy</code> 注解），Spring 会调用它。</li></ul><hr><p>以上描述了 Spring Bean 生命周期的主要阶段。了解这些阶段对于深入理解 Spring 的工作原理和实现高级功能非常有帮助。</p><h1 id="beanfactory-和-applicationcontext-有什么作用-两者之间的区别是什么" tabindex="-1"><a class="header-anchor" href="#beanfactory-和-applicationcontext-有什么作用-两者之间的区别是什么" aria-hidden="true">#</a> BeanFactory 和 ApplicationContext 有什么作用？两者之间的区别是什么</h1><h2 id="beanfactory-和-applicationcontext" tabindex="-1"><a class="header-anchor" href="#beanfactory-和-applicationcontext" aria-hidden="true">#</a> BeanFactory 和 ApplicationContext</h2><p><code>BeanFactory</code> 和 <code>ApplicationContext</code> 都是 Spring 框架中用于配置和管理 Bean 的容器。它们都提供了控制 Bean 生命周期、依赖注入等核心功能。但它们的目标和功能有所不同。</p><hr><h3 id="beanfactory" tabindex="-1"><a class="header-anchor" href="#beanfactory" aria-hidden="true">#</a> BeanFactory</h3><ul><li><strong>作用</strong>: <code>BeanFactory</code> 是 Spring 框架的基础容器，提供了完整的 Bean 生命周期管理功能。</li><li><strong>特点</strong>: <ul><li><strong>轻量级</strong>: 它是一个简单的容器，只提供了基本的 DI 功能。</li><li><strong>延迟初始化</strong>: 默认情况下，当 Bean 被请求时，<code>BeanFactory</code> 才会创建 Bean 实例。</li><li><strong>配置</strong>: 通常使用 XML 文件进行配置。</li></ul></li></ul><hr><h3 id="applicationcontext" tabindex="-1"><a class="header-anchor" href="#applicationcontext" aria-hidden="true">#</a> ApplicationContext</h3><ul><li><strong>作用</strong>: <code>ApplicationContext</code> 是 <code>BeanFactory</code> 的一个超集，提供了更多的高级功能。它是大多数 Spring 应用程序的中心接口。</li><li><strong>特点</strong>: <ul><li><strong>功能丰富</strong>: 除了 <code>BeanFactory</code> 的所有功能，它还提供了其他功能，如国际化、事件传播、资源加载等。</li><li><strong>立即初始化</strong>: 默认情况下，当容器启动时，所有的单例 Bean 都会被立即初始化。</li><li><strong>配置</strong>: 可以使用 XML 文件、Java 注解或 Java 代码进行配置。</li><li><strong>额外的功能</strong>: 如 <code>ApplicationEventPublisher</code> (事件发布)、<code>ResourceLoader</code> (资源加载) 等。</li></ul></li></ul><hr><h3 id="两者之间的主要区别" tabindex="-1"><a class="header-anchor" href="#两者之间的主要区别" aria-hidden="true">#</a> 两者之间的主要区别:</h3><ol><li><strong>功能</strong>: <code>ApplicationContext</code> 提供了比 <code>BeanFactory</code> 更多的功能。实际上，<code>ApplicationContext</code> 在内部使用 <code>BeanFactory</code> 来实现 Bean 的配置和管理。</li><li><strong>初始化</strong>: <code>BeanFactory</code> 默认是延迟初始化 Bean 的，而 <code>ApplicationContext</code> 默认会立即初始化所有单例 Bean。</li><li><strong>使用场景</strong>: 对于简单的应用程序或资源受限的环境，<code>BeanFactory</code> 可能是一个好选择。但在大多数情况下，<code>ApplicationContext</code> 是更好的选择，因为它提供了更多的功能。</li><li><strong>扩展性</strong>: <code>ApplicationContext</code> 提供了多种扩展点，允许开发者添加自定义功能。</li></ol><hr><p>总的来说，虽然 <code>BeanFactory</code> 和 <code>ApplicationContext</code> 都可以用于配置和管理 Bean，但 <code>ApplicationContext</code> 提供了更多的高级功能，并且是大多数 Spring 应用程序的推荐选择。</p><h1 id="什么是-factorybean-和-beanfactory-的区别" tabindex="-1"><a class="header-anchor" href="#什么是-factorybean-和-beanfactory-的区别" aria-hidden="true">#</a> 什么是 FactoryBean？和 BeanFactory 的区别</h1><h2 id="factorybean" tabindex="-1"><a class="header-anchor" href="#factorybean" aria-hidden="true">#</a> FactoryBean</h2><p><code>FactoryBean</code> 是一个特殊的 Spring Bean，它的主要目的是产生其他 Bean 的实例。当你需要在 Spring 容器中创建一个复杂的 Bean 或需要通过特定的逻辑来创建 Bean 时，<code>FactoryBean</code> 是非常有用的。</p><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点:</h3><ol><li><strong>创建复杂对象</strong>: 如果一个对象的创建逻辑复杂或需要特定的构建步骤，可以使用 <code>FactoryBean</code>。</li><li><strong>延迟加载</strong>: 可以使用 <code>FactoryBean</code> 来延迟加载对象。</li><li><strong>返回不同类型的对象</strong>: 一个 <code>FactoryBean</code> 可以根据配置或状态返回不同类型的对象。</li></ol><h3 id="主要方法" tabindex="-1"><a class="header-anchor" href="#主要方法" aria-hidden="true">#</a> 主要方法:</h3><ul><li><code>getObject()</code>: 返回由 <code>FactoryBean</code> 创建的 Bean 实例。</li><li><code>getObjectType()</code>: 返回 <code>FactoryBean</code> 创建的对象类型。</li><li><code>isSingleton()</code>: 返回由此 <code>FactoryBean</code> 创建的对象是否为单例。</li></ul><hr><h2 id="beanfactory-1" tabindex="-1"><a class="header-anchor" href="#beanfactory-1" aria-hidden="true">#</a> BeanFactory</h2><p><code>BeanFactory</code> 是 Spring 框架的核心容器接口，负责管理 Bean 的生命周期、依赖注入等。它提供了基本的容器功能，如检索 Bean、查看 Bean 是否存在、查询 Bean 的类型等。</p><hr><h2 id="factorybean-与-beanfactory-的区别" tabindex="-1"><a class="header-anchor" href="#factorybean-与-beanfactory-的区别" aria-hidden="true">#</a> FactoryBean 与 BeanFactory 的区别:</h2><ol><li><p><strong>目的</strong>:</p><ul><li><strong>FactoryBean</strong>: 用于创建其他 Bean 的实例。它是一个 Bean，但其主要目的是作为工厂来生产其他 Bean。</li><li><strong>BeanFactory</strong>: 是 Spring 框架的核心容器，负责管理 Bean 的生命周期和依赖注入。</li></ul></li><li><p><strong>使用场景</strong>:</p><ul><li><strong>FactoryBean</strong>: 当需要通过特定的逻辑或步骤来创建 Bean 时使用。</li><li><strong>BeanFactory</strong>: 用于检索和管理 Bean。</li></ul></li><li><p><strong>类型</strong>:</p><ul><li><strong>FactoryBean</strong>: 是一个接口，可以由开发者实现，以创建特定的 Bean。</li><li><strong>BeanFactory</strong>: 也是一个接口，但它是 Spring 框架的核心接口，通常不需要开发者直接实现。</li></ul></li><li><p><strong>方法</strong>:</p><ul><li><strong>FactoryBean</strong>: 提供了 <code>getObject()</code>, <code>getObjectType()</code>, 和 <code>isSingleton()</code> 等方法。</li><li><strong>BeanFactory</strong>: 提供了 <code>getBean()</code>, <code>containsBean()</code>, <code>getType()</code> 等方法。</li></ul></li></ol><hr><p>总的来说，<code>FactoryBean</code> 和 <code>BeanFactory</code> 都与 Bean 的创建和管理有关，但它们的目的和使用方式是不同的。<code>FactoryBean</code> 是一个特定的 Bean，用于创建其他 Bean，而 <code>BeanFactory</code> 是 Spring 框架的核心容器，负责管理所有的 Bean。</p><h1 id="介绍下-ioc-容器的加载过程-spring-的初始化过程" tabindex="-1"><a class="header-anchor" href="#介绍下-ioc-容器的加载过程-spring-的初始化过程" aria-hidden="true">#</a> 介绍下 IoC 容器的加载过程（Spring 的初始化过程）</h1><h2 id="spring-ioc-容器的加载过程" tabindex="-1"><a class="header-anchor" href="#spring-ioc-容器的加载过程" aria-hidden="true">#</a> Spring IoC 容器的加载过程</h2><p>Spring IoC (控制反转) 容器的初始化是一个复杂的过程，涉及多个步骤和组件。以下是 Spring IoC 容器加载的主要步骤：</p><hr><h3 id="_1-资源定位" tabindex="-1"><a class="header-anchor" href="#_1-资源定位" aria-hidden="true">#</a> 1. <strong>资源定位</strong></h3><p>首先，Spring 需要知道配置文件或配置类的位置。这些配置源可以是 XML 文件、Java 注解或 Java 配置类。</p><ul><li>使用 <code>Resource</code> 接口和其实现（如 <code>ClassPathResource</code>、<code>FileSystemResource</code> 等）来定位配置源。</li></ul><hr><h3 id="_2-加载配置" tabindex="-1"><a class="header-anchor" href="#_2-加载配置" aria-hidden="true">#</a> 2. <strong>加载配置</strong></h3><p>一旦配置源被定位，Spring 需要加载这些配置并转化为对应的数据结构。</p><ul><li>使用 <code>BeanDefinitionReader</code> 和其实现（如 <code>XmlBeanDefinitionReader</code>、<code>AnnotatedBeanDefinitionReader</code> 等）来读取配置源并转化为 <code>BeanDefinition</code> 对象。</li></ul><hr><h3 id="_3-注册-beandefinition" tabindex="-1"><a class="header-anchor" href="#_3-注册-beandefinition" aria-hidden="true">#</a> 3. <strong>注册 BeanDefinition</strong></h3><p><code>BeanDefinition</code> 对象包含了 Bean 的所有配置信息，如类名、作用域、构造函数参数、属性等。这些 <code>BeanDefinition</code> 需要被注册到 <code>BeanFactory</code>。</p><ul><li>使用 <code>DefaultListableBeanFactory</code> 或其子类来存储和管理 <code>BeanDefinition</code>。</li></ul><hr><h3 id="_4-初始化-bean" tabindex="-1"><a class="header-anchor" href="#_4-初始化-bean" aria-hidden="true">#</a> 4. <strong>初始化 Bean</strong></h3><p>当所有的 <code>BeanDefinition</code> 被加载和注册后，Spring 开始实例化和初始化 Bean。</p><ul><li>如果 Bean 是单例的，并且需要在启动时初始化（如数据库连接池），Spring 会立即实例化它。</li><li>如果 Bean 是原型的或标记为懒加载，它会在首次请求时被实例化。</li></ul><hr><h3 id="_5-依赖注入" tabindex="-1"><a class="header-anchor" href="#_5-依赖注入" aria-hidden="true">#</a> 5. <strong>依赖注入</strong></h3><p>在 Bean 被实例化后，Spring 会自动注入其依赖。</p><ul><li>使用 <code>AutowiredAnnotationBeanPostProcessor</code> 和其他 <code>BeanPostProcessor</code> 实现来处理 <code>@Autowired</code> 和其他注入注解。</li><li>使用 XML 配置或 Java 配置来定义的依赖也会被注入。</li></ul><hr><h3 id="_6-执行生命周期方法" tabindex="-1"><a class="header-anchor" href="#_6-执行生命周期方法" aria-hidden="true">#</a> 6. <strong>执行生命周期方法</strong></h3><p>Spring 会调用 Bean 的生命周期回调方法。</p><ul><li>如 <code>InitializingBean</code> 的 <code>afterPropertiesSet</code> 方法、<code>@PostConstruct</code> 注解的方法、或 XML 中定义的 <code>init-method</code>。</li><li>对于需要销毁的 Bean，如 <code>DisposableBean</code> 的 <code>destroy</code> 方法、<code>@PreDestroy</code> 注解的方法或 XML 中定义的 <code>destroy-method</code> 会在容器关闭时被调用。</li></ul><hr><h3 id="_7-完成初始化" tabindex="-1"><a class="header-anchor" href="#_7-完成初始化" aria-hidden="true">#</a> 7. <strong>完成初始化</strong></h3><p>此时，Spring IoC 容器已经完全初始化，所有的单例 Bean（除非标记为懒加载）都已经被实例化并初始化，容器现在可以接受请求并返回 Bean 实例。</p><hr><p>这是 Spring IoC 容器加载的高级概述。实际的过程涉及更多的细节和组件，但这为你提供了一个整体的理解。</p><h1 id="spring-的循环依赖问题-如何解决" tabindex="-1"><a class="header-anchor" href="#spring-的循环依赖问题-如何解决" aria-hidden="true">#</a> Spring 的循环依赖问题，如何解决</h1><h2 id="spring-的循环依赖问题" tabindex="-1"><a class="header-anchor" href="#spring-的循环依赖问题" aria-hidden="true">#</a> Spring 的循环依赖问题</h2><p>循环依赖是指两个或多个 Spring Bean 互相依赖，形成一个闭环。例如，Bean A 依赖于 Bean B，而 Bean B 又依赖于 Bean A。这种情况在构造函数注入中尤为明显，因为在构造 Bean 时就需要注入其依赖。</p><p>Spring 容器在处理 Bean 的创建和依赖注入时，有一套机制来处理这种循环依赖，特别是对于单例 Bean。</p><hr><h2 id="如何解决循环依赖" tabindex="-1"><a class="header-anchor" href="#如何解决循环依赖" aria-hidden="true">#</a> 如何解决循环依赖</h2><h3 id="_1-三级缓存机制" tabindex="-1"><a class="header-anchor" href="#_1-三级缓存机制" aria-hidden="true">#</a> 1. <strong>三级缓存机制</strong></h3><p>为了解决单例 Bean 的循环依赖问题，Spring 使用了三级缓存机制：</p><ul><li><strong>一级缓存 (<code>singletonObjects</code>)</strong>: 存储完全初始化的 Bean。</li><li><strong>二级缓存 (<code>earlySingletonObjects</code>)</strong>: 存储原始的 Bean 实例（未完全初始化）。</li><li><strong>三级缓存 (<code>singletonFactories</code>)</strong>: 存储 Bean 工厂对象，用于产生二级缓存中的对象。</li></ul><p>当 Spring 容器检测到一个 Bean 正在创建（但尚未完成），它会将这个 Bean 的工厂对象放入三级缓存。如果在初始化这个 Bean 的过程中需要注入其他 Bean，而这些 Bean 又依赖于原始的 Bean，Spring 会使用三级缓存中的工厂对象来创建一个早期的 Bean 实例，并将其放入二级缓存。这样，循环依赖就可以被解决。</p><h3 id="_2-避免构造函数注入" tabindex="-1"><a class="header-anchor" href="#_2-避免构造函数注入" aria-hidden="true">#</a> 2. <strong>避免构造函数注入</strong></h3><p>循环依赖在构造函数注入中尤为明显，因为 Bean 在构造时就需要其依赖。为了避免这个问题，可以使用 setter 注入或字段注入，这样 Spring 可以首先创建 Bean 实例，然后再注入依赖。</p><h3 id="_3-设计改进" tabindex="-1"><a class="header-anchor" href="#_3-设计改进" aria-hidden="true">#</a> 3. <strong>设计改进</strong></h3><p>循环依赖通常是设计问题的标志。如果可能，考虑重新设计应用程序的结构以消除循环依赖。这可能涉及到引入新的组件、使用设计模式或重新考虑组件的职责。</p><hr><p>总的来说，虽然 Spring 提供了机制来处理单例 Bean 的循环依赖，但最好的方法是通过设计改进来避免这种情况。</p><h1 id="有几种依赖注入方式-为什么不推荐使用字段注入" tabindex="-1"><a class="header-anchor" href="#有几种依赖注入方式-为什么不推荐使用字段注入" aria-hidden="true">#</a> 有几种依赖注入方式？为什么不推荐使用字段注入</h1><h2 id="依赖注入方式" tabindex="-1"><a class="header-anchor" href="#依赖注入方式" aria-hidden="true">#</a> 依赖注入方式</h2><p>在 Spring 中，主要有以下几种依赖注入方式：</p><ol><li><p><strong>构造函数注入</strong>: 通过 Bean 的构造函数来注入依赖。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AnotherService</span> anotherService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ExampleService</span><span class="token punctuation">(</span><span class="token class-name">AnotherService</span> anotherService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>anotherService <span class="token operator">=</span> anotherService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Setter 注入</strong>: 通过 Bean 的 setter 方法来注入依赖。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">AnotherService</span> anotherService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAnotherService</span><span class="token punctuation">(</span><span class="token class-name">AnotherService</span> anotherService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>anotherService <span class="token operator">=</span> anotherService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>字段注入</strong>: 直接在 Bean 的字段上注入依赖，通常使用 <code>@Autowired</code> 或 <code>@Inject</code> 注解。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AnotherService</span> anotherService<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>方法注入</strong>: 通过任意方法来注入依赖，不仅限于 setter 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">AnotherService</span> anotherService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">anyMethodName</span><span class="token punctuation">(</span><span class="token class-name">AnotherService</span> anotherService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>anotherService <span class="token operator">=</span> anotherService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><h2 id="为什么不推荐使用字段注入" tabindex="-1"><a class="header-anchor" href="#为什么不推荐使用字段注入" aria-hidden="true">#</a> 为什么不推荐使用字段注入？</h2><p>虽然字段注入在某些情况下可以使代码更简洁，但它有几个缺点：</p><ol><li><p><strong>不可变性</strong>: 使用构造函数注入可以确保 Bean 的依赖在创建后不会改变，从而保证 Bean 的不可变性。而字段注入则不能保证这一点。</p></li><li><p><strong>测试困难</strong>: 字段注入使得在单元测试中模拟依赖变得困难。你可能需要使用反射或其他技巧来设置私有字段的值。而构造函数或 setter 注入则允许你在测试中更容易地提供模拟的依赖。</p></li><li><p><strong>明确性</strong>: 构造函数注入明确地表明了 Bean 的必需依赖，而字段注入可能会隐藏这些依赖。</p></li><li><p><strong>循环依赖</strong>: 字段注入可能会导致难以诊断的循环依赖问题，尤其是在涉及多个 Bean 的情况下。</p></li><li><p><strong>不透明性</strong>: 字段注入可能会导致 Bean 的实际依赖关系在代码中不那么明显，这可能会使得代码阅读和维护变得困难。</p></li></ol><hr><p>总的来说，虽然字段注入在某些情况下可能看起来更简洁，但由于上述的缺点，许多开发者和团队更倾向于使用构造函数或 setter 注入。</p><h1 id="autowired-底层原理是什么" tabindex="-1"><a class="header-anchor" href="#autowired-底层原理是什么" aria-hidden="true">#</a> @Autowired 底层原理是什么</h1><p><code>@Autowired</code> 是 Spring 提供的一个注解，用于实现依赖注入。其底层原理涉及到 Spring 。以下是 <code>@Autowired</code> 的主要工作原理：</p><hr><h3 id="_1-bean-定义解析" tabindex="-1"><a class="header-anchor" href="#_1-bean-定义解析" aria-hidden="true">#</a> 1. <strong>Bean 定义解析</strong></h3><p>当 Spring 读取配置（无论是 XML 还是注解）时，它会解析 Bean 的定义并创建相应的 <code>BeanDefinition</code> 对象。如果 Bean 的字段、方法或构造函数上有 <code>@Autowired</code> 注解，这些元数据会被存储在 <code>BeanDefinition</code> 中。</p><hr><h3 id="_2-beanpostprocessor" tabindex="-1"><a class="header-anchor" href="#_2-beanpostprocessor" aria-hidden="true">#</a> 2. <strong>BeanPostProcessor</strong></h3><p>Spring 使用 <code>BeanPostProcessor</code> 接口来提供在 Bean 初始化过程中的扩展点。对于 <code>@Autowired</code> 的处理，Spring 提供了一个特定的 <code>BeanPostProcessor</code> 实现，即 <code>AutowiredAnnotationBeanPostProcessor</code>。</p><hr><h3 id="_3-处理注入" tabindex="-1"><a class="header-anchor" href="#_3-处理注入" aria-hidden="true">#</a> 3. <strong>处理注入</strong></h3><p>当 Spring 容器实例化和初始化 Bean 时，<code>AutowiredAnnotationBeanPostProcessor</code> 会拦截到这个过程。对于每个 Bean：</p><ul><li><p>它首先检查 Bean 的所有字段，查找 <code>@Autowired</code> 注解。对于每个带有此注解的字段，它会尝试从容器中按类型查找匹配的 Bean，并注入到该字段。</p></li><li><p>接下来，它会检查 Bean 的所有方法，查找 <code>@Autowired</code> 注解。对于每个带有此注解的方法，它会尝试从容器中按类型查找匹配的 Bean，并通过方法调用进行注入。</p></li><li><p>如果 <code>@Autowired</code> 注解在构造函数上，它会按类型查找匹配的 Bean 并通过构造函数注入。</p></li></ul><hr><h3 id="_4-解决歧义" tabindex="-1"><a class="header-anchor" href="#_4-解决歧义" aria-hidden="true">#</a> 4. <strong>解决歧义</strong></h3><p>如果容器中有多个相同类型的 Bean，<code>@Autowired</code> 注入可能会遇到歧义。为了解决这个问题，可以与 <code>@Qualifier</code> 注解一起使用 <code>@Autowired</code>，以指定要注入的确切 Bean 名称。</p><hr><h3 id="_5-非必需的依赖" tabindex="-1"><a class="header-anchor" href="#_5-非必需的依赖" aria-hidden="true">#</a> 5. <strong>非必需的依赖</strong></h3><p>默认情况下，<code>@Autowired</code> 要求依赖必须存在。如果没有找到匹配的 Bean，它会抛出异常。但是，可以将 <code>@Autowired</code> 的 <code>required</code> 属性设置为 <code>false</code>，这样，如果没有找到匹配的 Bean，它就不会抛出异常。</p><hr><h3 id="_6-内部工作" tabindex="-1"><a class="header-anchor" href="#_6-内部工作" aria-hidden="true">#</a> 6. <strong>内部工作</strong></h3><p>在内部，<code>AutowiredAnnotationBeanPostProcessor</code> 使用 <code>InjectionMetadata</code> 类来存储有关如何注入依赖的信息。它还使用 <code>ResolvableType</code> 和 <code>TypeConverter</code> 等工具类来解析泛型和执行类型转换。</p><hr><p>总的来说，<code>@Autowired</code> 的工作原理涉及到 Spring 容器的多个组件和步骤，从解析 Bean 定义，到使用 <code>BeanPostProcessor</code> 进行实际的依赖注入。</p>`,293),i=[o];function c(r,p){return n(),e("div",null,i)}const u=a(t,[["render",c],["__file","Spring基础.html.vue"]]);export{u as default};
