const e=JSON.parse('{"key":"v-55600d3a","path":"/blog/Java%E5%B9%B6%E5%8F%91/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.html","title":"线程池的基本原理","lang":"zh-CN","frontmatter":{"title":"线程池的基本原理","order":2,"category":["Java面经"],"tag":["JVM"],"description":"线程池的状态有哪些（线程池的生命周期） 线程池有五种状态：Running、ShutDown、Stop、Tidying、Terminated Running：线程池初始化后，处于RUNNING状态，可以接受新任务，以及对已添加的任务进行处理。; ShutDown：调用shutdown()方法后，线程池处于SHUTDOWN状态，不再接受新任务，但是会处理完...","head":[["meta",{"property":"og:url","content":"https://machaojin.cn/blog/Java%E5%B9%B6%E5%8F%91/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"JavaBlog"}],["meta",{"property":"og:title","content":"线程池的基本原理"}],["meta",{"property":"og:description","content":"线程池的状态有哪些（线程池的生命周期） 线程池有五种状态：Running、ShutDown、Stop、Tidying、Terminated Running：线程池初始化后，处于RUNNING状态，可以接受新任务，以及对已添加的任务进行处理。; ShutDown：调用shutdown()方法后，线程池处于SHUTDOWN状态，不再接受新任务，但是会处理完..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-10T07:12:20.000Z"}],["meta",{"property":"article:author","content":"Mr.Chaojin"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:modified_time","content":"2023-08-10T07:12:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程池的基本原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-10T07:12:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Chaojin\\",\\"url\\":\\"https://machaojin.cn\\",\\"email\\":\\"ma@machaojin.cn\\"}]}"]]},"headers":[{"level":2,"title":"线程池的状态有哪些（线程池的生命周期）","slug":"线程池的状态有哪些-线程池的生命周期","link":"#线程池的状态有哪些-线程池的生命周期","children":[]},{"level":2,"title":"线程池的工作原理","slug":"线程池的工作原理","link":"#线程池的工作原理","children":[]},{"level":2,"title":"线程池为什么要先判断阻塞队列是否已满，再判断线程数是否小于最大线程数，而不是反过来呢","slug":"线程池为什么要先判断阻塞队列是否已满-再判断线程数是否小于最大线程数-而不是反过来呢","link":"#线程池为什么要先判断阻塞队列是否已满-再判断线程数是否小于最大线程数-而不是反过来呢","children":[]},{"level":2,"title":"线程池的四种饱和策略（拒绝策略）","slug":"线程池的四种饱和策略-拒绝策略","link":"#线程池的四种饱和策略-拒绝策略","children":[]},{"level":2,"title":"如果线程池中的线程数量已经到达 maximumPoolSize，但是仍然有新任务来临，并且该任务的优先级比较高，不允许直接丢弃，希望该任务立即执行，该如何处理","slug":"如果线程池中的线程数量已经到达-maximumpoolsize-但是仍然有新任务来临-并且该任务的优先级比较高-不允许直接丢弃-希望该任务立即执行-该如何处理","link":"#如果线程池中的线程数量已经到达-maximumpoolsize-但是仍然有新任务来临-并且该任务的优先级比较高-不允许直接丢弃-希望该任务立即执行-该如何处理","children":[]},{"level":2,"title":"线程池的创建方法？为什么不要使用 Executors 创建线程池","slug":"线程池的创建方法-为什么不要使用-executors-创建线程池","link":"#线程池的创建方法-为什么不要使用-executors-创建线程池","children":[]},{"level":2,"title":"创建线程池时的基本参数？如何合理配置这些参数","slug":"创建线程池时的基本参数-如何合理配置这些参数","link":"#创建线程池时的基本参数-如何合理配置这些参数","children":[]},{"level":2,"title":"如何设置这些参数呢？比如CPU密集型任务和IO密集型任务？","slug":"如何设置这些参数呢-比如cpu密集型任务和io密集型任务","link":"#如何设置这些参数呢-比如cpu密集型任务和io密集型任务","children":[]},{"level":2,"title":"两种提交任务方法（submit 和 execute）的区别","slug":"两种提交任务方法-submit-和-execute-的区别","link":"#两种提交任务方法-submit-和-execute-的区别","children":[]},{"level":2,"title":"线程池中的某个线程异常了，那么线程池会怎么处理这个线程?","slug":"线程池中的某个线程异常了-那么线程池会怎么处理这个线程","link":"#线程池中的某个线程异常了-那么线程池会怎么处理这个线程","children":[]},{"level":2,"title":"如何监控线程池的运行状态","slug":"如何监控线程池的运行状态","link":"#如何监控线程池的运行状态","children":[]},{"level":2,"title":"Java 线程的通信（同步）方式有哪些","slug":"java-线程的通信-同步-方式有哪些","link":"#java-线程的通信-同步-方式有哪些","children":[]},{"level":2,"title":"怎么统计 Java 线程的阻塞时间和运行时间","slug":"怎么统计-java-线程的阻塞时间和运行时间","link":"#怎么统计-java-线程的阻塞时间和运行时间","children":[]}],"git":{"createdTime":1691651540000,"updatedTime":1691651540000,"contributors":[{"name":"machaojin","email":"1917939763@qq.com","commits":1}]},"readingTime":{"minutes":24.17,"words":7251},"filePathRelative":"blog/Java并发/线程池的基本原理.md","localizedDate":"2023年8月10日","autoDesc":true}');export{e as data};
