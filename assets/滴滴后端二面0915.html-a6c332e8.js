import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as l,c as r,b as n}from"./app-4b7d20d0.js";const o={},s=n('<h2 id="_1-面试官介绍部门划分-各个部门的主要业务以及技术栈" tabindex="-1"><a class="header-anchor" href="#_1-面试官介绍部门划分-各个部门的主要业务以及技术栈" aria-hidden="true">#</a> 1.面试官介绍部门划分，各个部门的主要业务以及技术栈</h2><h2 id="_2-自我介绍" tabindex="-1"><a class="header-anchor" href="#_2-自我介绍" aria-hidden="true">#</a> 2.自我介绍</h2><h2 id="_3-拷打项目-挖挺深-尤其是一些边缘内容一个劲问" tabindex="-1"><a class="header-anchor" href="#_3-拷打项目-挖挺深-尤其是一些边缘内容一个劲问" aria-hidden="true">#</a> 3.拷打项目，挖挺深，尤其是一些边缘内容一个劲问</h2><h2 id="_4-在项目开发过程中有没有总结出一些方法论-针对开发中可能出现的问题做预防" tabindex="-1"><a class="header-anchor" href="#_4-在项目开发过程中有没有总结出一些方法论-针对开发中可能出现的问题做预防" aria-hidden="true">#</a> 4.在项目开发过程中有没有总结出一些方法论，针对开发中可能出现的问题做预防？</h2><h2 id="_5-有了解其他语言吗-做过算法相关的工作吗" tabindex="-1"><a class="header-anchor" href="#_5-有了解其他语言吗-做过算法相关的工作吗" aria-hidden="true">#</a> 5.有了解其他语言吗？做过算法相关的工作吗？</h2><h2 id="_6-juc" tabindex="-1"><a class="header-anchor" href="#_6-juc" aria-hidden="true">#</a> 6.JUC</h2><h2 id="_1hashmap了解吗-介绍一下它对应的线程安全版本。让讲讲红黑树-我只说了大概的思想。" tabindex="-1"><a class="header-anchor" href="#_1hashmap了解吗-介绍一下它对应的线程安全版本。让讲讲红黑树-我只说了大概的思想。" aria-hidden="true">#</a> ①HashMap了解吗？介绍一下它对应的线程安全版本。让讲讲红黑树，我只说了大概的思想。</h2><h2 id="_2还知道哪些常用数据结构对应的线程安全版本" tabindex="-1"><a class="header-anchor" href="#_2还知道哪些常用数据结构对应的线程安全版本" aria-hidden="true">#</a> ②还知道哪些常用数据结构对应的线程安全版本？</h2><h2 id="_7-数据库" tabindex="-1"><a class="header-anchor" href="#_7-数据库" aria-hidden="true">#</a> 7.数据库</h2><h2 id="_1数据库的类型-如何分类-各类都有哪些代表产品" tabindex="-1"><a class="header-anchor" href="#_1数据库的类型-如何分类-各类都有哪些代表产品" aria-hidden="true">#</a> ①数据库的类型，如何分类，各类都有哪些代表产品？</h2><p>数据库可以根据多种标准进行分类。以下是一种常见的分类方法及其代表性产品：</p><ol><li><p><strong>关系型数据库 (RDBMS)</strong>:</p><ul><li>基于关系模型，使用SQL作为查询语言。</li><li>代表产品： <ul><li><strong>MySQL</strong>: 开源数据库，广泛用于各种应用。</li><li><strong>PostgreSQL</strong>: 功能丰富的开源RDBMS。</li><li><strong>Oracle</strong>: 商业数据库，广泛用于大型企业。</li><li><strong>Microsoft SQL Server</strong>: 微软的数据库解决方案。</li><li><strong>SQLite</strong>: 轻量级的数据库，常用于移动应用和桌面应用。</li></ul></li></ul></li><li><p><strong>NoSQL数据库</strong>:</p><ul><li><p>不仅仅基于关系模型，通常不使用SQL作为查询语言。可以进一步细分为以下子类：</p></li><li><p><strong>文档型数据库</strong>:</p><ul><li>以文档形式存储数据（如JSON）。</li><li>代表产品：<strong>MongoDB</strong>, <strong>CouchDB</strong>。</li></ul></li><li><p><strong>键值存储</strong>:</p><ul><li>简单的键值对存储。</li><li>代表产品：<strong>Redis</strong>, <strong>Riak</strong>。</li></ul></li><li><p><strong>列式存储</strong>:</p><ul><li>以列族形式存储数据，适合分布式存储。</li><li>代表产品：<strong>Cassandra</strong>, <strong>HBase</strong>。</li></ul></li><li><p><strong>图数据库</strong>:</p><ul><li>用于存储图形结构的数据。</li><li>代表产品：<strong>Neo4j</strong>, <strong>ArangoDB</strong>。</li></ul></li></ul></li><li><p><strong>对象-关系型数据库 (ORDBMS)</strong>:</p><ul><li>结合了关系数据库和对象数据库的特点。</li><li>代表产品：<strong>PostgreSQL</strong>（具有ORDBMS特性）。</li></ul></li><li><p><strong>时间序列数据库 (TSDB)</strong>:</p><ul><li>专为时间序列数据（如日志和指标）设计。</li><li>代表产品：<strong>InfluxDB</strong>, <strong>TimescaleDB</strong>。</li></ul></li><li><p><strong>分布式数据库</strong>:</p><ul><li>设计为跨多个节点或集群运行，以提高可用性和扩展性。</li><li>代表产品：<strong>Cassandra</strong> (列式存储), <strong>CockroachDB</strong> (关系型), <strong>Spanner</strong> (Google的分布式数据库)。</li></ul></li><li><p><strong>内存数据库 (IMDB)</strong>:</p><ul><li>数据主要存储在内存中，提供非常高的读写速度。</li><li>代表产品：<strong>Redis</strong> (也可以持久化到磁盘), <strong>SAP HANA</strong>。</li></ul></li><li><p><strong>新SQL数据库</strong>:</p><ul><li>结合了传统RDBMS的ACID特性和NoSQL数据库的水平扩展性。</li><li>代表产品：<strong>CockroachDB</strong>, <strong>NuoDB</strong>。</li></ul></li></ol><p>这只是数据库分类的一个简化视图。实际上，随着技术的发展，很多数据库产品都跨越了上述的分类界限，结合了多种类型的特点。</p><h2 id="_2关系型数据库的特点和优势-适用于那些场景" tabindex="-1"><a class="header-anchor" href="#_2关系型数据库的特点和优势-适用于那些场景" aria-hidden="true">#</a> ②关系型数据库的特点和优势，适用于那些场景？</h2><p>关系型数据库（RDBMS）基于关系模型，使用结构化查询语言（SQL）进行数据定义和操作。以下是关系型数据库的主要特点、优势以及适用场景：</p><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点：</h3><ol><li><strong>数据结构</strong>：数据以表格的形式存储，每个表有不同的字段和数据类型。</li><li><strong>数据完整性</strong>：通过主键、外键和其他约束确保数据的完整性和准确性。</li><li><strong>数据持久性</strong>：数据被持久地存储在磁盘上，即使在系统故障后也能恢复。</li><li><strong>支持ACID属性</strong>：即原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability）。</li><li><strong>查询能力</strong>：使用SQL进行复杂的查询，包括联接、分组和排序等操作。</li><li><strong>事务管理</strong>：支持事务操作，确保数据的一致性和完整性。</li><li><strong>并发控制</strong>：多个用户可以同时访问数据库，系统确保每个事务都在一个一致的数据库状态下执行。</li></ol><h3 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势：</h3><ol><li><strong>数据完整性和准确性</strong>：通过数据约束和事务管理确保数据的完整性。</li><li><strong>成熟和稳定</strong>：关系型数据库技术经过了几十年的发展，被广泛认为是成熟和稳定的。</li><li><strong>强大的查询能力</strong>：SQL提供了丰富的查询和数据操作功能。</li><li><strong>广泛的支持</strong>：许多应用程序和工具都支持关系型数据库。</li><li><strong>安全性</strong>：提供访问控制、加密和审计功能，确保数据的安全性。</li><li><strong>数据恢复</strong>：支持备份和恢复功能，确保数据的持久性。</li></ol><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景：</h3><ol><li><strong>结构化数据存储</strong>：当数据结构相对稳定并且可以预定义时。</li><li><strong>复杂查询</strong>：需要进行复杂查询、报表生成或数据分析的场景。</li><li><strong>数据完整性要求高</strong>：如金融、医疗和教育等领域，数据的完整性和准确性至关重要。</li><li><strong>事务处理</strong>：需要支持ACID属性的应用，如银行交易、订单处理等。</li><li><strong>并发访问</strong>：多用户或应用需要同时访问和修改数据的场景。</li><li><strong>企业级应用</strong>：大多数传统的企业资源规划（ERP）、客户关系管理（CRM）和供应链管理（SCM）系统都基于关系型数据库。</li></ol><p>尽管关系型数据库有许多优势，但它们可能不适合所有场景，特别是需要高度可扩展性或处理非结构化数据的场景。在这些情况下，NoSQL数据库或其他数据存储解决方案可能更为合适。</p><h2 id="_3innodb的存储模型" tabindex="-1"><a class="header-anchor" href="#_3innodb的存储模型" aria-hidden="true">#</a> ③InnoDB的存储模型</h2><p>InnoDB是MySQL的默认存储引擎，它提供了事务安全性、ACID兼容性、外键约束等功能。以下是InnoDB的存储模型的主要特点：</p><ol><li><p><strong>表空间</strong>:</p><ul><li>InnoDB存储其数据和索引在一个或多个表空间。默认情况下，所有的InnoDB表都存储在一个名为<code>ibdata1</code>的系统表空间中。</li><li>除了系统表空间，InnoDB还支持多个表空间，这可以使得数据库管理更加灵活。</li></ul></li><li><p><strong>数据页</strong>:</p><ul><li>InnoDB的存储结构是基于页的，这些页是表空间的连续部分。最常见的页大小是16KB。</li><li>数据页是InnoDB存储数据和索引的基本单位。</li></ul></li><li><p><strong>聚簇索引</strong>:</p><ul><li>在InnoDB中，表的存储方式是基于主键的聚簇索引进行的。这意味着表数据实际上是按照主键的顺序存储的。</li><li>如果表没有明确定义主键，InnoDB会选择一个唯一的非空索引。如果这样的索引也不存在，InnoDB会为每行生成一个6字节的隐藏主键。</li></ul></li><li><p><strong>二级索引</strong>:</p><ul><li>除了聚簇索引，InnoDB还支持多个二级索引。</li><li>二级索引不直接指向表中的行，而是指向聚簇索引的键值。</li></ul></li><li><p><strong>多版本并发控制 (MVCC)</strong>:</p><ul><li>InnoDB使用MVCC来支持高并发。这允许多个事务同时读取同一行数据，而不会互相阻塞。</li><li>MVCC通过创建数据的“读”版本来实现，这使得每个事务都可以看到一个一致的数据快照。</li></ul></li><li><p><strong>redo日志</strong>:</p><ul><li>InnoDB使用一个称为redo日志的机制来确保数据的持久性和恢复能力。</li><li>当数据发生变化时，这些变化首先被写入到redo日志中，然后再被应用到实际的数据页上。这种技术称为预写日志（WAL）。</li></ul></li><li><p><strong>双写缓冲区</strong>:</p><ul><li>为了解决在写入数据页到磁盘时可能出现的部分写故障，InnoDB使用了一个双写缓冲区。</li><li>在写入数据页到表空间之前，它们首先被写入到双写缓冲区。</li></ul></li><li><p><strong>自适应哈希索引</strong>:</p><ul><li>当某些数据页在缓冲池中被频繁访问时，InnoDB可能会为这些页建立一个哈希索引，从而加速读操作。</li></ul></li><li><p><strong>插入缓冲区</strong>:</p><ul><li>当向非聚簇索引插入或更新一个条目时，InnoDB可能会首先在插入缓冲区中存储这些变化，然后在后台将这些变化合并到实际的索引中。</li></ul></li><li><p><strong>数据字典</strong>:</p></li></ol><ul><li>InnoDB有一个内部的数据字典，用于存储有关表、索引、列和其他对象的元数据。</li></ul><p>这只是InnoDB存储模型的一个概述。InnoDB的内部结构和算法非常复杂，旨在提供高性能、可靠性和事务安全性。</p><h2 id="_4为什么要设计聚簇索引和非聚簇索引-优势在哪" tabindex="-1"><a class="header-anchor" href="#_4为什么要设计聚簇索引和非聚簇索引-优势在哪" aria-hidden="true">#</a> ④为什么要设计聚簇索引和非聚簇索引？优势在哪？</h2><p>聚簇索引和非聚簇索引是数据库设计中的两种主要索引类型，它们各自有其特定的用途和优势。让我们深入了解它们的设计原因和各自的优势。</p><h3 id="聚簇索引-clustered-index" tabindex="-1"><a class="header-anchor" href="#聚簇索引-clustered-index" aria-hidden="true">#</a> 聚簇索引 (Clustered Index)：</h3><ol><li><p><strong>设计原因</strong>:</p><ul><li>数据物理存储优化：聚簇索引决定了表中数据的物理存储顺序。数据实际上是按照聚簇索引的顺序存储在磁盘上的。</li><li>提高查询效率：对于范围查询或排序操作，聚簇索引可以大大提高效率，因为相关的数据行在磁盘上是连续的。</li></ul></li><li><p><strong>优势</strong>:</p><ul><li><strong>数据访问速度</strong>：由于数据与索引是一起存储的，所以访问聚簇索引的键值时，数据的访问速度非常快。</li><li><strong>范围查询优化</strong>：由于数据是按照索引的顺序存储的，范围查询（例如：<code>SELECT * FROM table WHERE id BETWEEN 10 AND 20</code>）可以连续地、快速地从磁盘上读取数据。</li></ul></li></ol><h3 id="非聚簇索引-non-clustered-index" tabindex="-1"><a class="header-anchor" href="#非聚簇索引-non-clustered-index" aria-hidden="true">#</a> 非聚簇索引 (Non-Clustered Index)：</h3><ol><li><p><strong>设计原因</strong>:</p><ul><li>辅助查询：非聚簇索引为表中的非主键列提供了快速查找的路径。</li><li>独立的索引结构：非聚簇索引是独立于数据的，它包含索引键值和一个指向聚簇索引键值（或堆文件中的行）的指针。</li></ul></li><li><p><strong>优势</strong>:</p><ul><li><strong>灵活性</strong>：可以为表中的任何列创建非聚簇索引，而不仅仅是主键列。</li><li><strong>查询性能</strong>：对于那些不涉及主键但需要快速查找的查询，非聚簇索引可以大大提高性能。</li><li><strong>插入性能</strong>：与聚簇索引相比，向非聚簇索引插入数据通常更快，因为数据的物理存储顺序不需要改变。</li><li><strong>额外的查询路径</strong>：非聚簇索引为查询提供了额外的路径，这可以帮助查询优化器选择最有效的执行计划。</li></ul></li></ol><p>总的来说，聚簇索引和非聚簇索引在数据库设计中都是至关重要的。聚簇索引优化了数据的物理存储和范围查询，而非聚簇索引提供了额外的查询路径和灵活性。正确地使用这两种索引可以大大提高数据库的性能和效率。</p><h2 id="_5innodb的事务是如何实现的" tabindex="-1"><a class="header-anchor" href="#_5innodb的事务是如何实现的" aria-hidden="true">#</a> ⑤InnoDB的事务是如何实现的？</h2><h2 id="_6redis这种非关系型数据库为什么不支持一般意义上的事务" tabindex="-1"><a class="header-anchor" href="#_6redis这种非关系型数据库为什么不支持一般意义上的事务" aria-hidden="true">#</a> ⑥Redis这种非关系型数据库为什么不支持一般意义上的事务？</h2><p>首先，要明确一点：Redis确实支持一种形式的事务，但这与传统关系型数据库中的事务有所不同。在Redis中，事务主要通过<code>MULTI</code>、<code>EXEC</code>、<code>DISCARD</code>和<code>WATCH</code>命令来实现。但是，这种事务处理方式与传统的RDBMS事务处理有明显的区别。</p><p>以下是为什么Redis不支持一般意义上的事务的原因：</p><ol><li><p><strong>设计目标</strong>：Redis是为了速度和效率而设计的。它是一个内存中的数据结构服务器，主要用于高速缓存和实时应用程序。为了实现这种速度，Redis必须避免传统数据库中的一些开销，如完整的ACID事务支持。</p></li><li><p><strong>数据模型</strong>：Redis的数据模型是基于键值对的，与关系型数据库的表和行模型不同。这种简单的数据模型不需要复杂的事务支持。</p></li><li><p><strong>原子性</strong>：尽管Redis不支持完整的事务，但它确保所有命令都是原子的。这意味着每个命令要么完全执行，要么完全不执行。这种原子性保证了在并发环境中数据的一致性。</p></li><li><p><strong>简化的事务模型</strong>：如前所述，Redis通过<code>MULTI</code>和<code>EXEC</code>命令提供了一种简化的事务模型。这允许用户将多个命令组合成一个原子组，然后一次性执行。但是，这与传统的ACID事务有所不同，因为Redis不支持回滚（除了使用<code>DISCARD</code>命令放弃事务之外）。</p></li><li><p><strong>持久性选项</strong>：Redis提供了几种不同的数据持久性选项，如RDB快照和AOF日志。这些选项允许用户在性能和数据持久性之间进行权衡，而不是强制执行完整的ACID事务。</p></li><li><p><strong>分布式考虑</strong>：在分布式版本的Redis（如Redis Cluster）中，支持跨多个节点的传统事务会增加复杂性并降低性能。</p></li></ol><p>总的来说，Redis的设计目标、数据模型和用例与传统的关系型数据库不同，因此它不支持一般意义上的事务。然而，对于其主要的用例（如高速缓存、消息队列和实时分析），Redis提供的简化的事务和原子性保证是足够的。</p><h2 id="_8-分布式" tabindex="-1"><a class="header-anchor" href="#_8-分布式" aria-hidden="true">#</a> 8.分布式</h2><h2 id="_1了解哪些典型的分布式系统" tabindex="-1"><a class="header-anchor" href="#_1了解哪些典型的分布式系统" aria-hidden="true">#</a> ①了解哪些典型的分布式系统？</h2><p>分布式系统已经成为现代计算的核心，支撑着各种大规模、高可用性和高性能的应用。以下是一些典型的分布式系统：</p><ol><li><p><strong>分布式计算框架</strong>:</p><ul><li><strong>Apache Hadoop</strong>: 一个开源框架，用于分布式存储和处理大数据集。它的核心是HDFS（Hadoop Distributed FileSystem）和MapReduce计算模型。</li><li><strong>Apache Spark</strong>: 一个大数据处理框架，比Hadoop的MapReduce更快，支持实时数据处理。</li></ul></li><li><p><strong>分布式数据库</strong>:</p><ul><li><strong>Cassandra</strong>: 一个高可用性和可扩展性的NoSQL数据库。</li><li><strong>MongoDB</strong>: 一个分布式文档数据库。</li><li><strong>CockroachDB</strong>: 一个分布式SQL数据库，旨在提供全球一致性和弹性。</li></ul></li><li><p><strong>分布式消息系统</strong>:</p><ul><li><strong>Apache Kafka</strong>: 一个高吞吐量的分布式事件流平台。</li><li><strong>RabbitMQ</strong>: 一个广泛使用的消息代理。</li></ul></li><li><p><strong>分布式存储系统</strong>:</p><ul><li><strong>Amazon S3</strong>: 一个高度可扩展的对象存储服务。</li><li><strong>Google Cloud Storage</strong>: 类似于S3的对象存储服务。</li><li><strong>Ceph</strong>: 一个开源的分布式存储系统。</li></ul></li><li><p><strong>分布式协调服务</strong>:</p><ul><li><strong>Zookeeper</strong>: 用于维护配置信息、命名、提供分布式同步和提供组服务的分布式服务。</li><li><strong>etcd</strong>: 一个用于配置管理和服务发现的键值存储。</li></ul></li><li><p><strong>分布式搜索引擎</strong>:</p><ul><li><strong>Elasticsearch</strong>: 一个基于Lucene的搜索和分析引擎。</li><li><strong>Apache Solr</strong>: 也是基于Lucene的，用于全文搜索、命中突出显示和多面搜索。</li></ul></li><li><p><strong>分布式日志系统</strong>:</p><ul><li><strong>ELK Stack (Elasticsearch, Logstash, Kibana)</strong>: 用于搜索、分析和可视化日志数据的组合。</li><li><strong>Graylog</strong>: 一个用于日志管理和分析的开源工具。</li></ul></li><li><p><strong>分布式文件系统</strong>:</p><ul><li><strong>HDFS (Hadoop Distributed FileSystem)</strong>: Hadoop的分布式文件系统。</li><li><strong>GlusterFS</strong>: 一个开源的分布式文件系统。</li></ul></li><li><p><strong>分布式网络</strong>:</p><ul><li><strong>gRPC</strong>: 一个高性能、开源的RPC框架，由Google开发。</li><li><strong>Nginx</strong>: 一个高性能的HTTP和反向代理服务器，也可以用作负载均衡器。</li></ul></li><li><p><strong>容器编排和管理</strong>:</p></li></ol><ul><li><strong>Kubernetes</strong>: 一个开源的容器编排平台，用于自动部署、扩展和管理容器化应用程序。</li><li><strong>Docker Swarm</strong>: Docker的原生集群管理和编排工具。</li></ul><p>这只是分布式系统的一部分，实际上还有许多其他的系统和工具。随着技术的发展，分布式系统的范围和复杂性也在不断增加。</p><h2 id="_2聊聊你理解的cap-c和a如何取舍-cp和ap有哪些代表性的系统" tabindex="-1"><a class="header-anchor" href="#_2聊聊你理解的cap-c和a如何取舍-cp和ap有哪些代表性的系统" aria-hidden="true">#</a> ②聊聊你理解的CAP，C和A如何取舍？CP和AP有哪些代表性的系统？</h2><p>CAP定理，也被称为Brewer&#39;s定理，是由Eric Brewer在2000年提出的。它描述了分布式数据存储系统在以下三个属性之间的基本权衡：</p><ol><li><strong>一致性 (Consistency)</strong>: 所有节点在同一时刻看到的数据是一致的。</li><li><strong>可用性 (Availability)</strong>: 每个请求（无论是读还是写）都会在有限的时间内返回结果，但这个结果可能不是最新的。</li><li><strong>分区容错性 (Partition Tolerance)</strong>: 系统即使在网络分区发生故障的情况下也能继续运行。</li></ol><p>根据CAP定理，分布式系统不能同时满足这三个属性。只能满足其中的两个。这导致了以下三种主要的系统设计：</p><ol><li><strong>CA (一致性和可用性)</strong>: 这样的系统在网络分区发生时可能无法正常工作。传统的关系型数据库往往更接近这种模型。</li><li><strong>CP (一致性和分区容错性)</strong>: 这样的系统在网络分区发生时会牺牲可用性来保证一致性。代表性的系统有： <ul><li><strong>Zookeeper</strong>: 用于协调分布式应用的服务。</li><li><strong>HBase</strong>: 一个分布式的、基于列的存储系统，它是Hadoop生态系统的一部分。</li><li><strong>etcd</strong>: 一个分布式的键值存储，常用于Kubernetes配置管理。</li></ul></li><li><strong>AP (可用性和分区容错性)</strong>: 这样的系统在网络分区发生时会牺牲一致性来保证可用性。代表性的系统有： <ul><li><strong>Cassandra</strong>: 一个分布式的NoSQL数据库。</li><li><strong>Couchbase</strong>: 一个分布式的NoSQL数据库。</li><li><strong>Riak</strong>: 一个分布式的键值存储。</li><li><strong>DynamoDB</strong>: Amazon的托管键值和文档数据库服务。</li></ul></li></ol><h3 id="c和a如何取舍" tabindex="-1"><a class="header-anchor" href="#c和a如何取舍" aria-hidden="true">#</a> C和A如何取舍？</h3><p>选择C还是A取决于应用的具体需求：</p><ul><li><p>如果应用需要强一致性（例如，金融交易系统），那么应该选择CP系统。在这种情况下，当网络分区发生时，系统可能会变得不可用，但数据始终保持一致。</p></li><li><p>如果应用可以容忍某种程度的数据不一致，但需要高可用性（例如，社交媒体应用），那么应该选择AP系统。在网络分区发生时，这些系统仍然可用，但可能会返回过时或不一致的数据。</p></li></ul><p>总的来说，CAP定理为分布式系统设计提供了一个框架，帮助开发者理解在一致性、可用性和分区容错性之间的权衡。</p><h2 id="_9-手撕-一个数组nums-下标i-j-求max-nums-j-nums-i" tabindex="-1"><a class="header-anchor" href="#_9-手撕-一个数组nums-下标i-j-求max-nums-j-nums-i" aria-hidden="true">#</a> 9.手撕：一个数组nums，下标i&lt;=j，求max（nums[j] - nums[i]）</h2>',56),t=[s];function e(a,g){return l(),r("div",null,t)}const p=i(o,[["render",e],["__file","滴滴后端二面0915.html.vue"]]);export{p as default};
